{
  "stats": {
    "suites": 7,
    "tests": 13,
    "passes": 9,
    "pending": 0,
    "failures": 4,
    "start": "2024-05-11T23:03:45.266Z",
    "end": "2024-05-11T23:03:45.955Z",
    "duration": 689,
    "testsRegistered": 13,
    "passPercent": 69.23076923076923,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "8f1d7780-148e-4a4b-a2ed-a8a96d65bdb8",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before each\" hook in \"{root}\"",
          "fullTitle": "\"before each\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 7,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "// Create user\nvar newUser = {\n  name: faker.name.firstName(),\n  email: faker.internet.email(),\n  password: faker.internet.password()\n};\n//register a new user first then authenticate it to continue\nrequest.post('/api/v1/users').send(newUser).expect(200).end(function (err, res) {\n  if (err) return done(err);\n  done();\n});",
          "err": {},
          "uuid": "bd40760f-2296-4e5d-963f-5061314630d8",
          "parentUUID": "8f1d7780-148e-4a4b-a2ed-a8a96d65bdb8",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"before each\" hook in \"{root}\"",
          "fullTitle": "\"before each\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 11,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "// Create user\nvar newUser = {\n  name: faker.name.firstName(),\n  email: faker.internet.email(),\n  password: faker.internet.password()\n};\n//register a new user first then authenticate it to continue\nrequest.post('/api/v1/users').send(newUser).expect(200).end(function (err, res) {\n  if (err) return done(err);\n  // Authenticate user\n  var credentials = {\n    email: newUser.email,\n    password: newUser.password\n  };\n  request.post('/api/v1/auth').send(credentials).expect(200).end(function (err, res) {\n    if (err) return done(err);\n    authToken = res.body.token; //to authenticate user to get token used to delete user by token\n    done();\n  });\n});",
          "err": {},
          "uuid": "7d1f7321-9678-4c5b-bd88-52937832ecc2",
          "parentUUID": "8f1d7780-148e-4a4b-a2ed-a8a96d65bdb8",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"before each\" hook in \"{root}\"",
          "fullTitle": "\"before each\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 9,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "// Create user\nvar newUser = {\n  name: faker.name.firstName(),\n  email: faker.internet.email(),\n  password: faker.internet.password()\n};\n//register a new user first then authenticate it to continue\nrequest.post('/api/v1/users').send(newUser).expect(200).end(function (err, res) {\n  if (err) return done(err);\n  // Authenticate user\n  var credentials = {\n    email: newUser.email,\n    password: newUser.password\n  };\n  request.post('/api/v1/auth').send(credentials).expect(200).end(function (err, res) {\n    if (err) return done(err);\n    authToken = res.body.token; //to authenticate user to get token used to delete user by token\n    done();\n  });\n});",
          "err": {},
          "uuid": "06a10490-0e05-4b4b-a02c-8886c302414f",
          "parentUUID": "8f1d7780-148e-4a4b-a2ed-a8a96d65bdb8",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook in \"{root}\"",
          "fullTitle": "\"after all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 9,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); });",
          "err": {},
          "uuid": "9cfa6ec1-515e-4d73-b3d1-990795ee7a46",
          "parentUUID": "8f1d7780-148e-4a4b-a2ed-a8a96d65bdb8",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after all\" hook in \"{root}\"",
          "fullTitle": "\"after all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 5,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); });",
          "err": {},
          "uuid": "4c8c45de-49c3-4a73-8c5b-b709ced58b60",
          "parentUUID": "8f1d7780-148e-4a4b-a2ed-a8a96d65bdb8",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook in \"{root}\"",
          "fullTitle": "\"after each\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "deleteAllUsers();",
          "err": {},
          "uuid": "8ed8576a-e1fb-4c72-9c48-bb2a49273584",
          "parentUUID": "8f1d7780-148e-4a4b-a2ed-a8a96d65bdb8",
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "b64eb222-b4a9-4f9c-9766-edf4bb242981",
          "title": "User Authentication API for not registered user",
          "fullFile": "C:\\Users\\Maria\\OneDrive - Faculty of Engineering Ain Shams University\\Desktop\\SDET_Task_Mariam_Waleed\\API_TEST\\test\\authenticate_user.js",
          "file": "\\test\\authenticate_user.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return status 401 and \"Incorrect email or password\" for unregistered email",
              "fullTitle": "User Authentication API for not registered user should return status 401 and \"Incorrect email or password\" for unregistered email",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var credentials = {\n  email: \"not_registestered@gmail.com\",\n  password: \"not_registestered_password\"\n};\nrequest.post('/api/v1/auth').send(credentials).expect(401).end(function (err, res) {\n  if (err) return done(err);\n  var responseBody = res.body;\n  if (responseBody.message !== 'Incorrect email or password') {\n    return done(new Error('Unexpected message in response'));\n  }\n  console.log('Status:', res.status); // Display the response status\n  console.log('Response message:', responseBody.message); // Display the response message\n  done();\n});",
              "err": {},
              "uuid": "e91cd9e6-ba90-446a-abff-721cdaa3a8f9",
              "parentUUID": "b64eb222-b4a9-4f9c-9766-edf4bb242981",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e91cd9e6-ba90-446a-abff-721cdaa3a8f9"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 10,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "f4967b57-323d-41f6-90b9-b37f8bd4b671",
          "title": "User Authentication API for a registered user",
          "fullFile": "C:\\Users\\Maria\\OneDrive - Faculty of Engineering Ain Shams University\\Desktop\\SDET_Task_Mariam_Waleed\\API_TEST\\test\\authenticate_user.js",
          "file": "\\test\\authenticate_user.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"User Authentication API for a registered user\"",
              "fullTitle": "User Authentication API for a registered user \"before all\" hook in \"User Authentication API for a registered user\"",
              "timedOut": false,
              "duration": 23,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); });",
              "err": {},
              "uuid": "8b7d9c0c-1c84-443f-9d15-ef73c4370552",
              "parentUUID": "f4967b57-323d-41f6-90b9-b37f8bd4b671",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should authenticate the user and store the token",
              "fullTitle": "User Authentication API for a registered user should authenticate the user and store the token",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (!userEmail || !userPassword) {\n  return done(new Error('User email or password missing'));\n}\nvar credentials = {\n  email: userEmail,\n  password: userPassword\n};\nrequest.post('/api/v1/auth').send(credentials).expect(200).end(function (err, res) {\n  if (err) return done(err);\n  var responseBody = res.body;\n  if (!responseBody.token) {\n    return done(new Error('Token missing in response'));\n  }\n  // Store token for further use\n  authToken = responseBody.token;\n  console.log('User authenticated with token:', authToken);\n  done();\n});",
              "err": {},
              "uuid": "6dd12063-e0e5-48b5-8117-619c06619eac",
              "parentUUID": "f4967b57-323d-41f6-90b9-b37f8bd4b671",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6dd12063-e0e5-48b5-8117-619c06619eac"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 7,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "847d8486-78d0-4103-b255-3baaa0f45d34",
          "title": "poitive:Create_user->POST /api/v1/users",
          "fullFile": "C:\\Users\\Maria\\OneDrive - Faculty of Engineering Ain Shams University\\Desktop\\SDET_Task_Mariam_Waleed\\API_TEST\\test\\Create_user.js",
          "file": "\\test\\Create_user.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "testcase-1(valid body,check for message & token)",
              "fullTitle": "poitive:Create_user->POST /api/v1/users testcase-1(valid body,check for message & token)",
              "timedOut": false,
              "duration": 11,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "/*\nconstruct random user\n*/\nvar user = {\n  name: faker.name.firstName(),\n  email: faker.internet.email(),\n  password: faker.internet.password()\n};\nconsole.log(user);\nrequest.post(\"/api/v1/users\").send(user).expect(200).end(function (err, res) {\n  var responseBody = res.body;\n  console.log('Response message:', responseBody.message); // Display the response message\n  if (responseBody.message !== 'User registered with success') {\n    return done(new Error('Unexpected message in response'));\n  }\n  if (!responseBody.token) {\n    return done(new Error('Token missing in response')); /* this error finds a bug where token not found */\n  }\n  done();\n});",
              "err": {
                "message": "Error: Token missing in response",
                "estack": "Error: Token missing in response\n    at Test.<anonymous> (test\\/Create_user.js:46:23)\n    at Test.assert (node_modules\\supertest\\lib\\test.js:172:8)\n    at localAssert (node_modules\\supertest\\lib\\test.js:120:14)\n    at fn (node_modules\\supertest\\lib\\test.js:125:7)\n    at Test.callback (node_modules\\superagent\\src\\node\\index.js:913:12)\n    at fn (node_modules\\superagent\\src\\node\\index.js:1166:18)\n    at IncomingMessage.<anonymous> (node_modules\\superagent\\src\\node\\parsers\\json.js:19:7)\n    at IncomingMessage.emit (node:events:530:35)\n    at endReadableNT (node:internal/streams/readable:1696:12)\n    at processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "2ff7530e-9a8d-4ca9-bafd-503ca945f333",
              "parentUUID": "847d8486-78d0-4103-b255-3baaa0f45d34",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "create user with empty request body->(negative testing)",
              "fullTitle": "poitive:Create_user->POST /api/v1/users create user with empty request body->(negative testing)",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Send a POST request to '/api/v1/users' with an empty body\nrequest.post(\"/api/v1/users\").send('{}').expect.not.end(function (err, res) {\n  var responseBody = res.body;\n  console.log('status:', res.status);\n  console.log('Response message:', responseBody.message); // Display the response message\n  if (responseBody.message === 'User registered with success' && res.status === 200) {\n    return done(new Error(' message in response should not be successful registered & status shouldnt be 200'));\n  }\n  done();\n});",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading 'end')",
                "estack": "TypeError: Cannot read properties of undefined (reading 'end')\n    at Context.<anonymous> (test\\/Create_user.js:60:18)\n    at processImmediate (node:internal/timers:478:21)",
                "diff": null
              },
              "uuid": "0ce39c5a-2bd0-4a1f-a609-19192cc558ec",
              "parentUUID": "847d8486-78d0-4103-b255-3baaa0f45d34",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "2ff7530e-9a8d-4ca9-bafd-503ca945f333",
            "0ce39c5a-2bd0-4a1f-a609-19192cc558ec"
          ],
          "pending": [],
          "skipped": [],
          "duration": 11,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "fda1723f-d0e7-4c9d-a410-650cb6f620c9",
          "title": "Delete All Users API",
          "fullFile": "C:\\Users\\Maria\\OneDrive - Faculty of Engineering Ain Shams University\\Desktop\\SDET_Task_Mariam_Waleed\\API_TEST\\test\\delete_all_users.js",
          "file": "\\test\\delete_all_users.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should delete all users with correct key_admin and return success message",
              "fullTitle": "Delete All Users API should delete all users with correct key_admin and return success message",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var requestBody = {\n  key_admin: 'keyadmin123'\n};\nrequest[\"delete\"]('/api/v1/all-users').send(requestBody).expect(200).end(function (err, res) {\n  if (err) return done(err);\n  var responseBody = res.body;\n  if (responseBody.message !== 'Users deleted with success') {\n    return done(new Error('Unexpected message in response'));\n  }\n  console.log('Response message:', responseBody.message); // Display the response message\n  done();\n});",
              "err": {},
              "uuid": "e3a373fe-c958-42a9-80f4-1193ea2ab7ed",
              "parentUUID": "fda1723f-d0e7-4c9d-a410-650cb6f620c9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return \"Unauthorized access\" message for wrong key_admin",
              "fullTitle": "Delete All Users API should return \"Unauthorized access\" message for wrong key_admin",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var requestBody = {\n  key_admin: 'wrong_key'\n};\nrequest[\"delete\"]('/api/v1/all-users').send(requestBody).expect(403).end(function (err, res) {\n  if (err) return done(err);\n  var responseBody = res.body;\n  if (responseBody.message !== 'Unauthorized access') {\n    return done(new Error('Unexpected message in response'));\n  }\n  console.log('Response message:', responseBody.message); // Display the response message\n  done();\n});",
              "err": {},
              "uuid": "72677acc-1bc7-480f-b94f-9ade022464cf",
              "parentUUID": "fda1723f-d0e7-4c9d-a410-650cb6f620c9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e3a373fe-c958-42a9-80f4-1193ea2ab7ed",
            "72677acc-1bc7-480f-b94f-9ade022464cf"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 10,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "2fe56ae6-1d13-45a8-b0d0-5e7ec2ba737e",
          "title": "Delete User API",
          "fullFile": "C:\\Users\\Maria\\OneDrive - Faculty of Engineering Ain Shams University\\Desktop\\SDET_Task_Mariam_Waleed\\API_TEST\\test\\delete_by_token.js",
          "file": "\\test\\delete_by_token.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should delete user with valid authorization and return success message",
              "fullTitle": "Delete User API should delete user with valid authorization and return success message",
              "timedOut": false,
              "duration": 15,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "request[\"delete\"]('/api/v1/users').set('Authorization', authToken).expect(200).end(function (err, res) {\n  if (err) {\n    console.error('Error:', err);\n    console.error('Response body:', res.body);\n    return done(err);\n  }\n  var responseBody = res.body;\n  if (responseBody.message !== 'User deleted with success!') {\n    console.error('Unexpected message in response:', responseBody);\n    return done(new Error('Unexpected message in response'));\n  }\n  console.log('Response message:', responseBody.message); // Display the response message\n  done();\n});",
              "err": {
                "message": "Error: expected 200 \"OK\", got 500 \"Internal Server Error\"",
                "estack": "Error: expected 200 \"OK\", got 500 \"Internal Server Error\"\n    at Context.<anonymous> (test\\/delete_by_token.js:61:4)\n    at processImmediate (node:internal/timers:478:21)\n----\n    at Test._assertStatus (node_modules\\supertest\\lib\\test.js:252:14)\n    at C:\\Users\\Maria\\OneDrive - Faculty of Engineering Ain Shams University\\Desktop\\SDET_Task_Mariam_Waleed\\API_TEST\\node_modules\\supertest\\lib\\test.js:308:13\n    at Test._assertFunction (node_modules\\supertest\\lib\\test.js:285:13)\n    at Test.assert (node_modules\\supertest\\lib\\test.js:164:23)\n    at localAssert (node_modules\\supertest\\lib\\test.js:120:14)\n    at fn (node_modules\\supertest\\lib\\test.js:125:7)\n    at Test.callback (node_modules\\superagent\\src\\node\\index.js:925:3)\n    at IncomingMessage.<anonymous> (node_modules\\superagent\\src\\node\\index.js:1166:18)\n    at IncomingMessage.emit (node:events:530:35)\n    at endReadableNT (node:internal/streams/readable:1696:12)\n    at processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "fe0f139f-3623-4ca8-ad4f-cf800335cf44",
              "parentUUID": "2fe56ae6-1d13-45a8-b0d0-5e7ec2ba737e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return \"Unauthorized to delete\" message for invalid authorization",
              "fullTitle": "Delete User API should return \"Unauthorized to delete\" message for invalid authorization",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var invalidToken = 'invalid_token';\nrequest[\"delete\"]('/api/v1/users').set('Authorization', invalidToken).expect(403).end(function (err, res) {\n  if (err) {\n    console.error('Error:', err);\n    console.error('Response body:', res.body);\n    return done(err);\n  }\n  var responseBody = res.body;\n  if (responseBody.message !== 'Unauthorized to delete') {\n    console.error('Unexpected message in response:', responseBody);\n    return done(new Error('Unexpected message in response'));\n  }\n  console.log('Response message:', responseBody.message); // Display the response message\n  done();\n});",
              "err": {},
              "uuid": "dae2c556-5fe2-4414-85fc-25c72385cf03",
              "parentUUID": "2fe56ae6-1d13-45a8-b0d0-5e7ec2ba737e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "dae2c556-5fe2-4414-85fc-25c72385cf03"
          ],
          "failures": [
            "fe0f139f-3623-4ca8-ad4f-cf800335cf44"
          ],
          "pending": [],
          "skipped": [],
          "duration": 18,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "9eb0eb3a-f3c3-4523-bb9f-21610488a3e2",
          "title": "GET_BY_TOKEN(valid/invalid)Authorization",
          "fullFile": "C:\\Users\\Maria\\OneDrive - Faculty of Engineering Ain Shams University\\Desktop\\SDET_Task_Mariam_Waleed\\API_TEST\\test\\GET_PATCH_USER_BY_TOKEN.js",
          "file": "\\test\\GET_PATCH_USER_BY_TOKEN.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return user details with all fields & give error if one of the fields is missing with log message (valid authorization)",
              "fullTitle": "GET_BY_TOKEN(valid/invalid)Authorization should return user details with all fields & give error if one of the fields is missing with log message (valid authorization)",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request.get('/api/v1/users').set('Authorization', authToken).expect(200).end(function (err, res) {\n  if (err) return done(err);\n  var responseBody = res.body;\n  // Check each field of the response\n  if (!responseBody.id) {\n    return done(new Error('ID is missing in response'));\n  }\n  if (!responseBody.name) {\n    return done(new Error('Name is missing in response'));\n  }\n  if (!responseBody.email) {\n    return done(new Error('Email is missing in response'));\n  }\n  if (!responseBody.password) {\n    return done(new Error('Password is missing in response'));\n  }\n  if (!responseBody.imageUrl) {\n    return done(new Error('Image URL is missing in response'));\n  }\n  console.log('User details:', responseBody); // Display the response body\n  done();\n});",
              "err": {},
              "uuid": "2f698298-3d55-4871-9c30-4264233d1a68",
              "parentUUID": "9eb0eb3a-f3c3-4523-bb9f-21610488a3e2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return \"Unauthorized\" with status 403 for invalid authorization token",
              "fullTitle": "GET_BY_TOKEN(valid/invalid)Authorization should return \"Unauthorized\" with status 403 for invalid authorization token",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var invalidToken = 'invalid_token';\nrequest.get('/api/v1/users').set('Authorization', invalidToken).expect(403).end(function (err, res) {\n  if (err) return done(err);\n  var responseBody = res.body;\n  if (responseBody.message !== 'Unauthorized') {\n    return done(new Error('Unexpected message in response'));\n  }\n  console.log('Response message:', responseBody.message); // Display the response message\n  console.log('Status:', res.status); // Display the response status\n  done();\n});",
              "err": {},
              "uuid": "a0f2755b-c867-4509-8a09-89f9d76b514a",
              "parentUUID": "9eb0eb3a-f3c3-4523-bb9f-21610488a3e2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2f698298-3d55-4871-9c30-4264233d1a68",
            "a0f2755b-c867-4509-8a09-89f9d76b514a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 7,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "81e3ff22-87bc-4c9f-86d7-500f4f7f7263",
          "title": "Update User API,valid,invalid,valid_wrong_token",
          "fullFile": "C:\\Users\\Maria\\OneDrive - Faculty of Engineering Ain Shams University\\Desktop\\SDET_Task_Mariam_Waleed\\API_TEST\\test\\GET_PATCH_USER_BY_TOKEN.js",
          "file": "\\test\\GET_PATCH_USER_BY_TOKEN.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should update user details and return success message for valid token and correct data",
              "fullTitle": "Update User API,valid,invalid,valid_wrong_token should update user details and return success message for valid token and correct data",
              "timedOut": false,
              "duration": 6,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "request.patch('/api/v1/users').set('Authorization', authToken) //the only valid authorization\n.send(requestBody).expect(200).end(function (err, res) {\n  if (err) {\n    console.error('Error:', err);\n    console.error('Response body:', res.body);\n    return done(err);\n  }\n  var responseBody = res.body;\n  if (!responseBody.message) {\n    console.error('Response body does not contain message:', responseBody);\n    return done(new Error('Response body does not contain message'));\n  }\n  if (responseBody.message !== 'User updated with success!') {\n    return done(new Error('Unexpected message in response'));\n  }\n  if (Object.keys(responseBody).length !== 1) {\n    console.error('Response body contains additional fields,we only expect the response message:', responseBody);\n    return done(new Error('Response body contains additional fields'));\n  }\n  console.log('Response message:', responseBody.message); // Display the response message\n  done();\n});",
              "err": {
                "message": "Error: Response body contains additional fields",
                "estack": "Error: Response body contains additional fields\n    at Test.<anonymous> (test\\/GET_PATCH_USER_BY_TOKEN.js:166:23)\n    at Test.assert (node_modules\\supertest\\lib\\test.js:172:8)\n    at localAssert (node_modules\\supertest\\lib\\test.js:120:14)\n    at fn (node_modules\\supertest\\lib\\test.js:125:7)\n    at Test.callback (node_modules\\superagent\\src\\node\\index.js:913:12)\n    at fn (node_modules\\superagent\\src\\node\\index.js:1166:18)\n    at IncomingMessage.<anonymous> (node_modules\\superagent\\src\\node\\parsers\\json.js:19:7)\n    at IncomingMessage.emit (node:events:530:35)\n    at endReadableNT (node:internal/streams/readable:1696:12)\n    at processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "2e30013b-0f9e-4d58-b1bd-d2dd8a596d95",
              "parentUUID": "81e3ff22-87bc-4c9f-86d7-500f4f7f7263",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return status 403 and \"invalid token\" message for invalid token",
              "fullTitle": "Update User API,valid,invalid,valid_wrong_token should return status 403 and \"invalid token\" message for invalid token",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var invalidToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpb';\nrequest.patch('/api/v1/users').set('Authorization', invalidToken).send(requestBody).expect(403).end(function (err, res) {\n  if (err) return done(err);\n  var responseBody = res.body;\n  console.log('Status:', res.status); // Display the response status\n  console.log('Response message:', responseBody.message); // Display the response message\n  done();\n});",
              "err": {},
              "uuid": "24401ec5-1445-4885-a06f-3a330fe1a42b",
              "parentUUID": "81e3ff22-87bc-4c9f-86d7-500f4f7f7263",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return status 403 for wrong token, but valid token",
              "fullTitle": "Update User API,valid,invalid,valid_wrong_token should return status 403 for wrong token, but valid token",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var wrongToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6Im5ld19lbWFpbEBnbWFpbC5jb20iLCJpZCI6MzcwNDMsImlhdCI6MTcxMzEyNjcyOCwiZXhwIjoxNzEzMjEzMTI4fQ.y0j2VWhO5_Gwm3V2-_mrjETS_BenLyKwTMLteFV3puc';\nrequest.patch('/api/v1/users').set('Authorization', wrongToken).send(requestBody).expect(403).end(function (err, res) {\n  if (err) return done(err);\n  console.log('Status:', res.status); // Display the response status\n  done();\n});",
              "err": {},
              "uuid": "71c156a5-2299-424a-88c4-929aef0bcc2a",
              "parentUUID": "81e3ff22-87bc-4c9f-86d7-500f4f7f7263",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "24401ec5-1445-4885-a06f-3a330fe1a42b",
            "71c156a5-2299-424a-88c4-929aef0bcc2a"
          ],
          "failures": [
            "2e30013b-0f9e-4d58-b1bd-d2dd8a596d95"
          ],
          "pending": [],
          "skipped": [],
          "duration": 12,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.4.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}