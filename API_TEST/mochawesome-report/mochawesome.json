{
  "stats": {
    "suites": 10,
    "tests": 27,
    "passes": 17,
    "pending": 0,
    "failures": 10,
    "start": "2024-05-13T19:16:21.617Z",
    "end": "2024-05-13T19:16:23.283Z",
    "duration": 1666,
    "testsRegistered": 27,
    "passPercent": 62.96296296296296,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "b8f01758-53b9-43bb-be35-ab229faf869b",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before each\" hook in \"{root}\"",
          "fullTitle": "\"before each\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 7,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); });",
          "err": {},
          "uuid": "753ce791-c3d6-4e8e-86a6-1ad6ff29b43d",
          "parentUUID": "b8f01758-53b9-43bb-be35-ab229faf869b",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"before each\" hook in \"{root}\"",
          "fullTitle": "\"before each\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 22,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); });",
          "err": {},
          "uuid": "78468234-3a64-4b11-a55b-0f0ffde9a473",
          "parentUUID": "b8f01758-53b9-43bb-be35-ab229faf869b",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"before each\" hook in \"{root}\"",
          "fullTitle": "\"before each\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 10,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "// Create user\nvar newUser = {\n  name: faker.name.firstName(),\n  email: faker.internet.email(),\n  password: faker.internet.password()\n};\n//register a new user first then authenticate it to continue\nrequest.post('/api/v1/users').send(newUser).end(function (err, res) {\n  if (err) return done(err);\n  // Authenticate user\n  var credentials = {\n    email: newUser.email,\n    password: newUser.password\n  };\n  request.post('/api/v1/auth').send(credentials).end(function (err, res) {\n    if (err) return done(err);\n    authToken = res.body.token; //to authenticate user to get token used to delete user by token\n    console.log('authorization token', authToken);\n    done();\n  });\n});",
          "err": {},
          "uuid": "e15526ea-0f8a-4633-8303-360c83b496c6",
          "parentUUID": "b8f01758-53b9-43bb-be35-ab229faf869b",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"before each\" hook in \"{root}\"",
          "fullTitle": "\"before each\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 6,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "// Create user\nvar newUser = {\n  name: faker.name.firstName(),\n  email: faker.internet.email(),\n  password: faker.internet.password()\n};\n//register a new user first then authenticate it to continue\nrequest.post('/api/v1/users').send(newUser).expect(200).end(function (err, res) {\n  if (err) return done(err);\n  // Authenticate user\n  var credentials = {\n    email: newUser.email,\n    password: newUser.password\n  };\n  request.post('/api/v1/auth').send(credentials).expect(200).end(function (err, res) {\n    if (err) return done(err);\n    authToken = res.body.token; //to authenticate user to get token used to delete user by token\n    done();\n  });\n});",
          "err": {},
          "uuid": "9f758feb-b74b-4934-9def-bf6b71d0f7cc",
          "parentUUID": "b8f01758-53b9-43bb-be35-ab229faf869b",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook in \"{root}\"",
          "fullTitle": "\"after all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 5,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); });",
          "err": {},
          "uuid": "d2ff941d-1701-4dd4-b4ae-3c1ebc381cf0",
          "parentUUID": "b8f01758-53b9-43bb-be35-ab229faf869b",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after all\" hook in \"{root}\"",
          "fullTitle": "\"after all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 4,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); });",
          "err": {},
          "uuid": "a4156014-9bbf-4b5b-b79f-ecf6d15f1365",
          "parentUUID": "b8f01758-53b9-43bb-be35-ab229faf869b",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after all\" hook in \"{root}\"",
          "fullTitle": "\"after all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 7,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); });",
          "err": {},
          "uuid": "751c62f2-5469-42c6-8fd6-d08c78889a57",
          "parentUUID": "b8f01758-53b9-43bb-be35-ab229faf869b",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after all\" hook in \"{root}\"",
          "fullTitle": "\"after all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 4,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); });",
          "err": {},
          "uuid": "7535c7f4-4761-42a4-86af-03abed88780d",
          "parentUUID": "b8f01758-53b9-43bb-be35-ab229faf869b",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook in \"{root}\"",
          "fullTitle": "\"after each\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "(0, _function.deleteAllUsers)();",
          "err": {},
          "uuid": "a2ee99a3-3f3c-4584-ab98-47dc342bf407",
          "parentUUID": "b8f01758-53b9-43bb-be35-ab229faf869b",
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "4ea5683a-8167-4fb9-8c58-9b3a73b1982b",
          "title": "User Authentication API =>negative testing",
          "fullFile": "C:\\Users\\Maria\\OneDrive - Faculty of Engineering Ain Shams University\\Desktop\\SDET_Task_Mariam_Waleed\\API_TEST\\test\\authenticate_user.js",
          "file": "\\test\\authenticate_user.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "testcase 1:(autnenticate->login) unregistered user",
              "fullTitle": "User Authentication API =>negative testing testcase 1:(autnenticate->login) unregistered user",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var credentials = {\n  email: \"not_registestered@gmail.com\",\n  password: \"not_registered\"\n};\nrequest.post('/api/v1/auth').send(credentials).expect(401).end(function (err, res) {\n  if (err) return done(err);\n  var responseBody = res.body;\n  if (responseBody.message !== 'Incorrect email or password') {\n    return done(new Error('Unexpected message in response'));\n  }\n  console.log('Status:', res.status); // Display the response status\n  console.log('Response message:', responseBody.message); // Display the response message\n  done();\n});",
              "err": {},
              "uuid": "18855992-4352-4586-896f-4d762d202e43",
              "parentUUID": "4ea5683a-8167-4fb9-8c58-9b3a73b1982b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "testcase 2:(autnenticate->login) wrong email",
              "fullTitle": "User Authentication API =>negative testing testcase 2:(autnenticate->login) wrong email",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var credentials = {\n  email: \"wrong@gmail.com\",\n  password: userPassword\n};\nconsole.log(credentials.password);\nrequest.post('/api/v1/auth').send(credentials).expect(401).end(function (err, res) {\n  if (err) return done(err);\n  var responseBody = res.body;\n  if (responseBody.message !== 'Incorrect email or password') {\n    return done(new Error('Unexpected message in response'));\n  }\n  console.log('Status:', res.status); // Display the response status\n  console.log('Response message:', responseBody.message); // Display the response message\n  done();\n});",
              "err": {},
              "uuid": "26a329ec-28fd-4e97-ab8b-f3bb2a4f2657",
              "parentUUID": "4ea5683a-8167-4fb9-8c58-9b3a73b1982b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "testcase 3:(autnenticate->login) wrong password",
              "fullTitle": "User Authentication API =>negative testing testcase 3:(autnenticate->login) wrong password",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var credentials = {\n  email: userEmail,\n  password: \"wrongpass\"\n};\nrequest.post('/api/v1/auth').send(credentials).expect(401).end(function (err, res) {\n  if (err) return done(err);\n  var responseBody = res.body;\n  if (responseBody.message !== 'Incorrect email or password') {\n    return done(new Error('Unexpected message in response'));\n  }\n  console.log('Status:', res.status); // Display the response status\n  console.log('Response message:', responseBody.message); // Display the response message\n  done();\n});",
              "err": {},
              "uuid": "471286b1-dd47-444e-8469-44d234f593bf",
              "parentUUID": "4ea5683a-8167-4fb9-8c58-9b3a73b1982b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "testcase 4:(autnenticate->login) empty body field",
              "fullTitle": "User Authentication API =>negative testing testcase 4:(autnenticate->login) empty body field",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request.post('/api/v1/auth').send({}).expect(401).end(function (err, res) {\n  if (err) return done(err);\n  var responseBody = res.body;\n  if (responseBody.message !== 'Incorrect email or password') {\n    return done(new Error('Unexpected message in response'));\n  }\n  console.log('Status:', res.status); // Display the response status\n  console.log('Response message:', responseBody.message); // Display the response message\n  done();\n});",
              "err": {},
              "uuid": "f755cfd7-de76-4817-b109-b17163a7a7e6",
              "parentUUID": "4ea5683a-8167-4fb9-8c58-9b3a73b1982b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "18855992-4352-4586-896f-4d762d202e43",
            "26a329ec-28fd-4e97-ab8b-f3bb2a4f2657",
            "471286b1-dd47-444e-8469-44d234f593bf",
            "f755cfd7-de76-4817-b109-b17163a7a7e6"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 14,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "4e4763c2-7fa0-4ca8-971a-4e2f7c16bae3",
          "title": "User Authentication API for a registered user",
          "fullFile": "C:\\Users\\Maria\\OneDrive - Faculty of Engineering Ain Shams University\\Desktop\\SDET_Task_Mariam_Waleed\\API_TEST\\test\\authenticate_user.js",
          "file": "\\test\\authenticate_user.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should authenticate the user and store the token",
              "fullTitle": "User Authentication API for a registered user should authenticate the user and store the token",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (!userEmail || !userPassword) {\n  return done(new Error('User email or password missing'));\n}\nvar credentials = {\n  email: userEmail,\n  password: userPassword\n};\nrequest.post('/api/v1/auth').send(credentials).expect(200).end(function (err, res) {\n  if (err) return done(err);\n  var responseBody = res.body;\n  if (!responseBody.token) {\n    return done(new Error('Token missing in response'));\n  }\n  // Store token for further use\n  authToken = responseBody.token;\n  console.log('User authenticated with token:', authToken);\n  console.log('status:', res.status);\n  done();\n});",
              "err": {},
              "uuid": "b1a62fc9-71d7-4196-b219-26124dc2b325",
              "parentUUID": "4e4763c2-7fa0-4ca8-971a-4e2f7c16bae3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b1a62fc9-71d7-4196-b219-26124dc2b325"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "33bfc049-f10e-4f9c-b9a1-584f50849be6",
          "title": "poitive testing block:Create_user->POST /api/v1/users",
          "fullFile": "C:\\Users\\Maria\\OneDrive - Faculty of Engineering Ain Shams University\\Desktop\\SDET_Task_Mariam_Waleed\\API_TEST\\test\\Create_user.js",
          "file": "\\test\\Create_user.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "create user with a valid body",
              "fullTitle": "poitive testing block:Create_user->POST /api/v1/users create user with a valid body",
              "timedOut": false,
              "duration": 6,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "/*\nconstruct random user\n*/\nvar user = {\n  name: faker.name.firstName(),\n  email: faker.internet.email(),\n  password: faker.internet.password()\n};\nconsole.log(user);\nrequest.post(\"/api/v1/users\").send(user).expect(200).end(function (err, res) {\n  var responseBody = res.body;\n  console.log('Response message:', responseBody.message); // Display the response message\n  if (responseBody.message !== 'User registered with success') {\n    return done(new Error('Unexpected message in response'));\n  }\n  if (!responseBody.token) {\n    return done(new Error('Token missing in response')); /* this error finds a bug where token not found */\n  }\n  done();\n});",
              "err": {
                "message": "Error: Token missing in response",
                "estack": "Error: Token missing in response\n    at Test.<anonymous> (test\\/Create_user.js:41:23)\n    at Test.assert (node_modules\\supertest\\lib\\test.js:172:8)\n    at localAssert (node_modules\\supertest\\lib\\test.js:120:14)\n    at fn (node_modules\\supertest\\lib\\test.js:125:7)\n    at Test.callback (node_modules\\superagent\\src\\node\\index.js:913:12)\n    at fn (node_modules\\superagent\\src\\node\\index.js:1166:18)\n    at IncomingMessage.<anonymous> (node_modules\\superagent\\src\\node\\parsers\\json.js:19:7)\n    at IncomingMessage.emit (node:events:530:35)\n    at endReadableNT (node:internal/streams/readable:1696:12)\n    at processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "234c96eb-5c45-4917-9e4a-3a5735e7a314",
              "parentUUID": "33bfc049-f10e-4f9c-b9a1-584f50849be6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "234c96eb-5c45-4917-9e4a-3a5735e7a314"
          ],
          "pending": [],
          "skipped": [],
          "duration": 6,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "d8dbbc51-9215-429b-bdf4-7d841913a521",
          "title": "negative testing block:Create_user->POST /api/v1/users",
          "fullFile": "C:\\Users\\Maria\\OneDrive - Faculty of Engineering Ain Shams University\\Desktop\\SDET_Task_Mariam_Waleed\\API_TEST\\test\\Create_user.js",
          "file": "\\test\\Create_user.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "create user with empty invalid body",
              "fullTitle": "negative testing block:Create_user->POST /api/v1/users create user with empty invalid body",
              "timedOut": false,
              "duration": 3,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Send a POST request to '/api/v1/users' with an empty body\nrequest.post(\"/api/v1/users\").send({}).end(function (err, res) {\n  // Access the response status\n  var statusCode = res.status;\n  // Display the response status\n  console.log('status:', statusCode);\n  // Access the response body\n  var responseBody = res.body;\n  // Display the response message\n  console.log('Response message:', responseBody.message);\n  // Check if the response message is 'User registered with success' and status code is not 200\n  if (responseBody.message === 'User registered with success' && statusCode === 200) {\n    return done(new Error('Message in response should not be \"User registered with success\" and status code should not be 200'));\n  }\n  // Verify the response status code is not 200\n  if (statusCode === 200) {\n    return done(new Error('Unexpected status code 200 in response'));\n  }\n  done();\n});",
              "err": {
                "message": "Error: Message in response should not be \"User registered with success\" and status code should not be 200",
                "estack": "Error: Message in response should not be \"User registered with success\" and status code should not be 200\n    at Test.<anonymous> (test\\/Create_user.js:70:18)\n    at Test.assert (node_modules\\supertest\\lib\\test.js:172:8)\n    at localAssert (node_modules\\supertest\\lib\\test.js:120:14)\n    at fn (node_modules\\supertest\\lib\\test.js:125:7)\n    at Test.callback (node_modules\\superagent\\src\\node\\index.js:913:12)\n    at fn (node_modules\\superagent\\src\\node\\index.js:1166:18)\n    at IncomingMessage.<anonymous> (node_modules\\superagent\\src\\node\\parsers\\json.js:19:7)\n    at IncomingMessage.emit (node:events:530:35)\n    at endReadableNT (node:internal/streams/readable:1696:12)\n    at processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "edbc5f52-27ea-4330-96f5-02a4074a7eae",
              "parentUUID": "d8dbbc51-9215-429b-bdf4-7d841913a521",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "create user with email is missing",
              "fullTitle": "negative testing block:Create_user->POST /api/v1/users create user with email is missing",
              "timedOut": false,
              "duration": 3,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "var user = {\n  name: faker.name.firstName(),\n  password: faker.internet.password()\n};\n// Send a POST request to '/api/v1/users' with an empty body\nrequest.post(\"/api/v1/users\").send(user).end(function (err, res) {\n  // Access the response status\n  var statusCode = res.status;\n  // Display the response status\n  console.log('status:', statusCode);\n  // Access the response body\n  var responseBody = res.body;\n  // Display the response message\n  console.log('Response message:', responseBody.message);\n  // Check if the response message is 'User registered with success' and status code is not 200\n  if (responseBody.message === 'User registered with success' && statusCode === 200) {\n    return done(new Error('Message in response should not be \"User registered with success\" and status code should not be 200'));\n  }\n  // Verify the response status code is not 200\n  if (statusCode === 200) {\n    return done(new Error('Unexpected status code 200 in response'));\n  }\n  done();\n});",
              "err": {
                "message": "Error: Message in response should not be \"User registered with success\" and status code should not be 200",
                "estack": "Error: Message in response should not be \"User registered with success\" and status code should not be 200\n    at Test.<anonymous> (test\\/Create_user.js:103:21)\n    at Test.assert (node_modules\\supertest\\lib\\test.js:172:8)\n    at localAssert (node_modules\\supertest\\lib\\test.js:120:14)\n    at fn (node_modules\\supertest\\lib\\test.js:125:7)\n    at Test.callback (node_modules\\superagent\\src\\node\\index.js:913:12)\n    at fn (node_modules\\superagent\\src\\node\\index.js:1166:18)\n    at IncomingMessage.<anonymous> (node_modules\\superagent\\src\\node\\parsers\\json.js:19:7)\n    at IncomingMessage.emit (node:events:530:35)\n    at endReadableNT (node:internal/streams/readable:1696:12)\n    at processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "53947366-3843-47d2-b5a0-6e2fc9daac08",
              "parentUUID": "d8dbbc51-9215-429b-bdf4-7d841913a521",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "create user with name is missing",
              "fullTitle": "negative testing block:Create_user->POST /api/v1/users create user with name is missing",
              "timedOut": false,
              "duration": 5,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "var user = {\n  email: faker.internet.email(),\n  password: faker.internet.password()\n};\n// Send a POST request to '/api/v1/users' with an empty body\nrequest.post(\"/api/v1/users\").send(user).end(function (err, res) {\n  // Access the response status\n  var statusCode = res.status;\n  // Display the response status\n  console.log('status:', statusCode);\n  // Access the response body\n  var responseBody = res.body;\n  // Display the response message\n  console.log('Response message:', responseBody.message);\n  // Check if the response message is 'User registered with success' and status code is not 200\n  if (responseBody.message === 'User registered with success' && statusCode === 200) {\n    return done(new Error('Message in response should not be \"User registered with success\" and status code should not be 200'));\n  }\n  // Verify the response status code is not 200\n  if (statusCode === 200) {\n    return done(new Error('Unexpected status code 200 in response'));\n  }\n  done();\n});",
              "err": {
                "message": "Error: Message in response should not be \"User registered with success\" and status code should not be 200",
                "estack": "Error: Message in response should not be \"User registered with success\" and status code should not be 200\n    at Test.<anonymous> (test\\/Create_user.js:136:21)\n    at Test.assert (node_modules\\supertest\\lib\\test.js:172:8)\n    at localAssert (node_modules\\supertest\\lib\\test.js:120:14)\n    at fn (node_modules\\supertest\\lib\\test.js:125:7)\n    at Test.callback (node_modules\\superagent\\src\\node\\index.js:913:12)\n    at fn (node_modules\\superagent\\src\\node\\index.js:1166:18)\n    at IncomingMessage.<anonymous> (node_modules\\superagent\\src\\node\\parsers\\json.js:19:7)\n    at IncomingMessage.emit (node:events:530:35)\n    at endReadableNT (node:internal/streams/readable:1696:12)\n    at processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "1017024b-4a5b-444c-8d1b-0b93a3239ad1",
              "parentUUID": "d8dbbc51-9215-429b-bdf4-7d841913a521",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "create user with password is missing",
              "fullTitle": "negative testing block:Create_user->POST /api/v1/users create user with password is missing",
              "timedOut": false,
              "duration": 3,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "var user = {\n  name: faker.name.firstName(),\n  email: faker.internet.email()\n};\n// Send a POST request to '/api/v1/users' with an empty body\nrequest.post(\"/api/v1/users\").send(user).end(function (err, res) {\n  // Access the response status\n  var statusCode = res.status;\n  // Display the response status\n  console.log('status:', statusCode);\n  // Access the response body\n  var responseBody = res.body;\n  // Display the response message\n  console.log('Response message:', responseBody.message);\n  // Check if the response message is 'User registered with success' and status code is not 200\n  if (responseBody.message === 'User registered with success' && statusCode === 200) {\n    return done(new Error('Message in response should not be \"User registered with success\" and status code should not be 200'));\n  }\n  // Verify the response status code is not 200\n  if (statusCode === 200) {\n    return done(new Error('Unexpected status code 200 in response'));\n  }\n  done();\n});",
              "err": {
                "message": "Error: Message in response should not be \"User registered with success\" and status code should not be 200",
                "estack": "Error: Message in response should not be \"User registered with success\" and status code should not be 200\n    at Test.<anonymous> (test\\/Create_user.js:170:21)\n    at Test.assert (node_modules\\supertest\\lib\\test.js:172:8)\n    at localAssert (node_modules\\supertest\\lib\\test.js:120:14)\n    at fn (node_modules\\supertest\\lib\\test.js:125:7)\n    at Test.callback (node_modules\\superagent\\src\\node\\index.js:913:12)\n    at fn (node_modules\\superagent\\src\\node\\index.js:1166:18)\n    at IncomingMessage.<anonymous> (node_modules\\superagent\\src\\node\\parsers\\json.js:19:7)\n    at IncomingMessage.emit (node:events:530:35)\n    at endReadableNT (node:internal/streams/readable:1696:12)\n    at processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "9e6e7d17-2a2c-45dc-954c-b7fab5cd3b98",
              "parentUUID": "d8dbbc51-9215-429b-bdf4-7d841913a521",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "edbc5f52-27ea-4330-96f5-02a4074a7eae",
            "53947366-3843-47d2-b5a0-6e2fc9daac08",
            "1017024b-4a5b-444c-8d1b-0b93a3239ad1",
            "9e6e7d17-2a2c-45dc-954c-b7fab5cd3b98"
          ],
          "pending": [],
          "skipped": [],
          "duration": 14,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "16dd9fe9-73cc-46b9-b70e-87ee8b8188f2",
          "title": "Delete All Users API",
          "fullFile": "C:\\Users\\Maria\\OneDrive - Faculty of Engineering Ain Shams University\\Desktop\\SDET_Task_Mariam_Waleed\\API_TEST\\test\\delete_all_users.js",
          "file": "\\test\\delete_all_users.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "positive:test 1: with correct key_admin and return success message",
              "fullTitle": "Delete All Users API positive:test 1: with correct key_admin and return success message",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request[\"delete\"]('/api/v1/all-users').send(correct_requestBody).expect(200).end(function (err, res) {\n  if (err) return done(err);\n  var responseBody = res.body;\n  if (responseBody.message !== 'Users deleted with success') {\n    return done(new Error('Unexpected message in response'));\n  }\n  console.log('Response message:', responseBody.message); // Display the response message\n  done();\n});",
              "err": {},
              "uuid": "ba23f4d4-bfba-48d5-8cbb-8840ecf32fcf",
              "parentUUID": "16dd9fe9-73cc-46b9-b70e-87ee8b8188f2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "negative:test 2: \"Unauthorized access\" message for wrong key_admin",
              "fullTitle": "Delete All Users API negative:test 2: \"Unauthorized access\" message for wrong key_admin",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var requestBody = {\n  key_admin: 'wrong_key'\n};\nrequest[\"delete\"]('/api/v1/all-users').send(requestBody).expect(403).end(function (err, res) {\n  if (err) return done(err);\n  var responseBody = res.body;\n  if (responseBody.message !== 'Unauthorized access') {\n    return done(new Error('Unexpected message in response'));\n  }\n  console.log('Response message:', responseBody.message); // Display the response message\n  done();\n});",
              "err": {},
              "uuid": "2f607fab-4085-4146-b4e6-2ab98c9b95cf",
              "parentUUID": "16dd9fe9-73cc-46b9-b70e-87ee8b8188f2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "negative: test 3:should return \"Unauthorized access\" empty sent body",
              "fullTitle": "Delete All Users API negative: test 3:should return \"Unauthorized access\" empty sent body",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request[\"delete\"]('/api/v1/all-users').send({}).expect(403).end(function (err, res) {\n  if (err) return done(err);\n  var responseBody = res.body;\n  if (responseBody.message !== 'Unauthorized access') {\n    return done(new Error('Unexpected message in response'));\n  }\n  console.log('Response message:', responseBody.message); // Display the response message\n  done();\n});",
              "err": {},
              "uuid": "5e89a1d4-7d95-43d1-b74c-0cdfc8f2f2c2",
              "parentUUID": "16dd9fe9-73cc-46b9-b70e-87ee8b8188f2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "negative: test 4:should return \"Unauthorized access\" wrong key_admin->spelling field",
              "fullTitle": "Delete All Users API negative: test 4:should return \"Unauthorized access\" wrong key_admin->spelling field",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var requestBody = {\n  key_n: 'keyadmin123'\n};\nrequest[\"delete\"]('/api/v1/all-users').send(requestBody).expect(403).end(function (err, res) {\n  if (err) return done(err);\n  var responseBody = res.body;\n  if (responseBody.message !== 'Unauthorized access') {\n    return done(new Error('Unexpected message in response'));\n  }\n  console.log('Response message:', responseBody.message); // Display the response message\n  done();\n});",
              "err": {},
              "uuid": "2b2b937d-f920-40ac-bdae-bc7a8a34231e",
              "parentUUID": "16dd9fe9-73cc-46b9-b70e-87ee8b8188f2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ba23f4d4-bfba-48d5-8cbb-8840ecf32fcf",
            "2f607fab-4085-4146-b4e6-2ab98c9b95cf",
            "5e89a1d4-7d95-43d1-b74c-0cdfc8f2f2c2",
            "2b2b937d-f920-40ac-bdae-bc7a8a34231e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 18,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "2f350610-8c27-4e20-8436-002f5d61471f",
          "title": "positive testing block:Delete User API by token ",
          "fullFile": "C:\\Users\\Maria\\OneDrive - Faculty of Engineering Ain Shams University\\Desktop\\SDET_Task_Mariam_Waleed\\API_TEST\\test\\delete_by_token.js",
          "file": "\\test\\delete_by_token.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should delete user with valid authorization and return success message",
              "fullTitle": "positive testing block:Delete User API by token  should delete user with valid authorization and return success message",
              "timedOut": false,
              "duration": 37,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "request[\"delete\"]('/api/v1/users').set('Authorization', authToken).expect(200).end(function (err, res) {\n  if (err) {\n    console.error('Error:', err);\n    console.error('Response body:', res.body);\n    return done(err);\n  }\n  var responseBody = res.body;\n  if (responseBody.message !== 'User deleted with success!') {\n    console.error('Unexpected message in response:', responseBody);\n    return done(new Error('Unexpected message in response'));\n  }\n  console.log('Response message:', responseBody.message); // Display the response message\n  done();\n});",
              "err": {
                "message": "Error: expected 200 \"OK\", got 500 \"Internal Server Error\"",
                "estack": "Error: expected 200 \"OK\", got 500 \"Internal Server Error\"\n    at Context.<anonymous> (test\\/delete_by_token.js:61:4)\n    at processImmediate (node:internal/timers:478:21)\n----\n    at Test._assertStatus (node_modules\\supertest\\lib\\test.js:252:14)\n    at C:\\Users\\Maria\\OneDrive - Faculty of Engineering Ain Shams University\\Desktop\\SDET_Task_Mariam_Waleed\\API_TEST\\node_modules\\supertest\\lib\\test.js:308:13\n    at Test._assertFunction (node_modules\\supertest\\lib\\test.js:285:13)\n    at Test.assert (node_modules\\supertest\\lib\\test.js:164:23)\n    at localAssert (node_modules\\supertest\\lib\\test.js:120:14)\n    at fn (node_modules\\supertest\\lib\\test.js:125:7)\n    at Test.callback (node_modules\\superagent\\src\\node\\index.js:925:3)\n    at IncomingMessage.<anonymous> (node_modules\\superagent\\src\\node\\index.js:1166:18)\n    at IncomingMessage.emit (node:events:530:35)\n    at endReadableNT (node:internal/streams/readable:1696:12)\n    at processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "57fe6a79-ca70-4071-b054-cab370ce16a8",
              "parentUUID": "2f350610-8c27-4e20-8436-002f5d61471f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "57fe6a79-ca70-4071-b054-cab370ce16a8"
          ],
          "pending": [],
          "skipped": [],
          "duration": 37,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "6ef974c0-f642-4c3a-9e59-fd5b1af89814",
          "title": "negative testing block:Delete User API",
          "fullFile": "C:\\Users\\Maria\\OneDrive - Faculty of Engineering Ain Shams University\\Desktop\\SDET_Task_Mariam_Waleed\\API_TEST\\test\\delete_by_token.js",
          "file": "\\test\\delete_by_token.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "testcas_2: token sent invalid",
              "fullTitle": "negative testing block:Delete User API testcas_2: token sent invalid",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var invalidToken = 'invalid_token';\nrequest[\"delete\"]('/api/v1/users').set('Authorization', invalidToken).expect(403).end(function (err, res) {\n  if (err) {\n    console.error('Error:', err);\n    console.error('Response body:', res.body);\n    return done(err);\n  }\n  var responseBody = res.body;\n  if (responseBody.message !== 'Unauthorized to delete') {\n    console.error('Unexpected message in response:', responseBody);\n    return done(new Error('Unexpected message in response'));\n  }\n  console.log('Response message:', responseBody.message); // Display the response message\n  done();\n});",
              "err": {},
              "uuid": "14dce06a-8aea-47d5-b273-8b1042f656f1",
              "parentUUID": "6ef974c0-f642-4c3a-9e59-fd5b1af89814",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "testcas_3: no token sent as header auth",
              "fullTitle": "negative testing block:Delete User API testcas_3: no token sent as header auth",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request[\"delete\"]('/api/v1/users').expect(403).end(function (err, res) {\n  if (err) {\n    console.error('Error:', err);\n    console.error('Response body:', res.body);\n    return done(err);\n  }\n  var responseBody = res.body;\n  if (responseBody.message !== 'Unauthorized to delete') {\n    console.error('Unexpected message in response:', responseBody);\n    return done(new Error('Unexpected message in response'));\n  }\n  console.log('Response message:', responseBody.message); // Display the response message\n  done();\n});",
              "err": {},
              "uuid": "1516f7ef-79a5-4fd8-89a6-b0e3bd0eec05",
              "parentUUID": "6ef974c0-f642-4c3a-9e59-fd5b1af89814",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "testcas_3: token sent valid but wrong",
              "fullTitle": "negative testing block:Delete User API testcas_3: token sent valid but wrong",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var WRONGToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6InVzZXJAZ21haWwuY29tIiwiaWQiOjk2NDQ3LCJpYXQiOjE3MTU2MTQ0MDAsImV4cCI6MTcxNTcwMDgwMH0.BIkV-TndTt9En6uThDUQnNR5iYtW21vD1tEZ5ZxcaFg';\nrequest[\"delete\"]('/api/v1/users').set('Authorization', WRONGToken).expect(403).end(function (err, res) {\n  if (err) {\n    console.error('Error:', err);\n    console.error('Response body:', res.body);\n    return done(err);\n  }\n  var responseBody = res.body;\n  if (responseBody.message !== 'Unauthorized to delete') {\n    console.error('Unexpected message in response:', responseBody);\n    return done(new Error('Unexpected message in response'));\n  }\n  console.log('Response message:', responseBody.message); // Display the response message\n  done();\n});",
              "err": {},
              "uuid": "5e76d474-c2f7-4f26-9ff3-c1ba27f40452",
              "parentUUID": "6ef974c0-f642-4c3a-9e59-fd5b1af89814",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "14dce06a-8aea-47d5-b273-8b1042f656f1",
            "1516f7ef-79a5-4fd8-89a6-b0e3bd0eec05",
            "5e76d474-c2f7-4f26-9ff3-c1ba27f40452"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 11,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "9fddf27e-952f-4e50-a64a-f78756b80b3e",
          "title": "GET_BY_TOKEN(valid/invalid)Authorization",
          "fullFile": "C:\\Users\\Maria\\OneDrive - Faculty of Engineering Ain Shams University\\Desktop\\SDET_Task_Mariam_Waleed\\API_TEST\\test\\GET_PATCH_USER_BY_TOKEN.js",
          "file": "\\test\\GET_PATCH_USER_BY_TOKEN.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return user details with all fields & give error if one of the fields is missing with log message (valid authorization)",
              "fullTitle": "GET_BY_TOKEN(valid/invalid)Authorization should return user details with all fields & give error if one of the fields is missing with log message (valid authorization)",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request.get('/api/v1/users').set('Authorization', authToken).expect(200).end(function (err, res) {\n  if (err) return done(err);\n  var responseBody = res.body;\n  // Check each field of the response\n  if (!responseBody.id) {\n    return done(new Error('ID is missing in response'));\n  }\n  if (!responseBody.name) {\n    return done(new Error('Name is missing in response'));\n  }\n  if (!responseBody.email) {\n    return done(new Error('Email is missing in response'));\n  }\n  if (!responseBody.password) {\n    return done(new Error('Password is missing in response'));\n  }\n  if (!responseBody.imageUrl) {\n    return done(new Error('Image URL is missing in response'));\n  }\n  console.log('User details:', responseBody); // Display the response body\n  done();\n});",
              "err": {},
              "uuid": "bd805da0-6bf1-4581-b9b0-2000177194e5",
              "parentUUID": "9fddf27e-952f-4e50-a64a-f78756b80b3e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "test_case-2: invalid token passed,should return \"Unauthorized\" with status 403 ",
              "fullTitle": "GET_BY_TOKEN(valid/invalid)Authorization test_case-2: invalid token passed,should return \"Unauthorized\" with status 403 ",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var invalidToken = 'invalid_token';\nrequest.get('/api/v1/users').set('Authorization', invalidToken).expect(403).end(function (err, res) {\n  if (err) return done(err);\n  var responseBody = res.body;\n  if (responseBody.message !== 'Unauthorized') {\n    return done(new Error('Unexpected message in response'));\n  }\n  console.log('Response message:', responseBody.message); // Display the response message\n  console.log('Status:', res.status); // Display the response status\n  done();\n});",
              "err": {},
              "uuid": "d0b7d333-1870-4cae-b1c6-ecd5a67e7957",
              "parentUUID": "9fddf27e-952f-4e50-a64a-f78756b80b3e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "test_case-3: no passed token in the header,should return \"Unauthorized\" with status 403 ",
              "fullTitle": "GET_BY_TOKEN(valid/invalid)Authorization test_case-3: no passed token in the header,should return \"Unauthorized\" with status 403 ",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request.get('/api/v1/users').expect(403).end(function (err, res) {\n  if (err) return done(err);\n  var responseBody = res.body;\n  if (responseBody.message !== 'Unauthorized') {\n    return done(new Error('Unexpected message in response'));\n  }\n  console.log('Response message:', responseBody.message); // Display the response message\n  console.log('Status:', res.status); // Display the response status\n  done();\n});",
              "err": {},
              "uuid": "e850336f-9a22-49e4-a4bd-58fe1350a607",
              "parentUUID": "9fddf27e-952f-4e50-a64a-f78756b80b3e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "bd805da0-6bf1-4581-b9b0-2000177194e5",
            "d0b7d333-1870-4cae-b1c6-ecd5a67e7957",
            "e850336f-9a22-49e4-a4bd-58fe1350a607"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 12,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "8db4400a-1c53-4ace-8e9c-c57430f2da75",
          "title": "Update User API,Positive testing",
          "fullFile": "C:\\Users\\Maria\\OneDrive - Faculty of Engineering Ain Shams University\\Desktop\\SDET_Task_Mariam_Waleed\\API_TEST\\test\\GET_PATCH_USER_BY_TOKEN.js",
          "file": "\\test\\GET_PATCH_USER_BY_TOKEN.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "test_case_1:with valid & correct token,should update user details and return success message for valid token and correct data",
              "fullTitle": "Update User API,Positive testing test_case_1:with valid & correct token,should update user details and return success message for valid token and correct data",
              "timedOut": false,
              "duration": 5,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "request.patch('/api/v1/users').set('Authorization', authToken) //the only valid authorization\n.send(requestBody).expect(200).end(function (err, res) {\n  if (err) {\n    console.error('Error:', err);\n    console.error('Response body:', res.body);\n    return done(err);\n  }\n  var responseBody = res.body;\n  if (!responseBody.message) {\n    console.error('Response body does not contain message:', responseBody);\n    return done(new Error('Response body does not contain message'));\n  }\n  if (responseBody.message !== 'User updated with success!') {\n    return done(new Error('Unexpected message in response'));\n  }\n  if (Object.keys(responseBody).length !== 1) {\n    console.error('Response body contains additional fields,we only expect the response message:', responseBody);\n    return done(new Error('Response body contains additional fields'));\n  }\n  console.log('Response message:', responseBody.message); // Display the response message\n  done();\n});",
              "err": {
                "message": "Error: Response body contains additional fields",
                "estack": "Error: Response body contains additional fields\n    at Test.<anonymous> (test\\/GET_PATCH_USER_BY_TOKEN.js:193:23)\n    at Test.assert (node_modules\\supertest\\lib\\test.js:172:8)\n    at localAssert (node_modules\\supertest\\lib\\test.js:120:14)\n    at fn (node_modules\\supertest\\lib\\test.js:125:7)\n    at Test.callback (node_modules\\superagent\\src\\node\\index.js:913:12)\n    at fn (node_modules\\superagent\\src\\node\\index.js:1166:18)\n    at IncomingMessage.<anonymous> (node_modules\\superagent\\src\\node\\parsers\\json.js:19:7)\n    at IncomingMessage.emit (node:events:530:35)\n    at endReadableNT (node:internal/streams/readable:1696:12)\n    at processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "7327e6ba-ed86-443e-a23f-7dce34b99982",
              "parentUUID": "8db4400a-1c53-4ace-8e9c-c57430f2da75",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "7327e6ba-ed86-443e-a23f-7dce34b99982"
          ],
          "pending": [],
          "skipped": [],
          "duration": 5,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "e43ef5da-eb17-4728-9e12-d0741ea511d2",
          "title": "Update User API,valid,invalid,valid_wrong_token",
          "fullFile": "C:\\Users\\Maria\\OneDrive - Faculty of Engineering Ain Shams University\\Desktop\\SDET_Task_Mariam_Waleed\\API_TEST\\test\\GET_PATCH_USER_BY_TOKEN.js",
          "file": "\\test\\GET_PATCH_USER_BY_TOKEN.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "valid body,invalid token",
              "fullTitle": "Update User API,valid,invalid,valid_wrong_token valid body,invalid token",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var invalidToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpb';\nrequest.patch('/api/v1/users').set('Authorization', invalidToken).send(requestBody).expect(403).end(function (err, res) {\n  if (err) return done(err);\n  var responseBody = res.body;\n  console.log('Status:', res.status); // Display the response status\n  console.log('Response message:', responseBody.message); // Display the response message\n  done();\n});",
              "err": {},
              "uuid": "37fe5b03-a65d-42ce-bebc-9bc12b87e4a9",
              "parentUUID": "e43ef5da-eb17-4728-9e12-d0741ea511d2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "valid body,valid token format but wrong",
              "fullTitle": "Update User API,valid,invalid,valid_wrong_token valid body,valid token format but wrong",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var wrongToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6Im5ld19lbWFpbEBnbWFpbC5jb20iLCJpZCI6MzcwNDMsImlhdCI6MTcxMzEyNjcyOCwiZXhwIjoxNzEzMjEzMTI4fQ.y0j2VWhO5_Gwm3V2-_mrjETS_BenLyKwTMLteFV3puc';\nrequest.patch('/api/v1/users').set('Authorization', wrongToken).send(requestBody).expect(403).end(function (err, res) {\n  if (err) return done(err);\n  console.log('Status:', res.status); // Display the response status\n  done();\n});",
              "err": {},
              "uuid": "166e936c-4467-444a-91f2-1dcfb8d90300",
              "parentUUID": "e43ef5da-eb17-4728-9e12-d0741ea511d2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid body(wrong name field,pass is missed),valid correct token",
              "fullTitle": "Update User API,valid,invalid,valid_wrong_token invalid body(wrong name field,pass is missed),valid correct token",
              "timedOut": false,
              "duration": 4,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "var requestBody = {\n  \"Wrong\": \"newName\",\n  \"email\": \"new_email@gmail.com\"\n};\nrequest.patch('/api/v1/users').set('Authorization', authToken).send(requestBody).expect(403).end(function (err, res) {\n  console.log('Status:', res.status); // Display the response status\n  if (res.body.message === 'User updated with success!' && res.status === 200) {\n    return done(new Error('for invalid body Message in response should not be :User updated with success! and status code should not be 200'));\n  }\n  done();\n});",
              "err": {
                "message": "Error: for invalid body Message in response should not be :User updated with success! and status code should not be 200",
                "estack": "Error: for invalid body Message in response should not be :User updated with success! and status code should not be 200\n    at Test.<anonymous> (test\\/GET_PATCH_USER_BY_TOKEN.js:255:25)\n    at Test.assert (node_modules\\supertest\\lib\\test.js:172:8)\n    at localAssert (node_modules\\supertest\\lib\\test.js:120:14)\n    at fn (node_modules\\supertest\\lib\\test.js:125:7)\n    at Test.callback (node_modules\\superagent\\src\\node\\index.js:913:12)\n    at fn (node_modules\\superagent\\src\\node\\index.js:1166:18)\n    at IncomingMessage.<anonymous> (node_modules\\superagent\\src\\node\\parsers\\json.js:19:7)\n    at IncomingMessage.emit (node:events:530:35)\n    at endReadableNT (node:internal/streams/readable:1696:12)\n    at processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "66f34113-1c5f-4919-8d71-3d37e2f30724",
              "parentUUID": "e43ef5da-eb17-4728-9e12-d0741ea511d2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid body(wrong name field &passfield,email is missed),valid correct token",
              "fullTitle": "Update User API,valid,invalid,valid_wrong_token invalid body(wrong name field &passfield,email is missed),valid correct token",
              "timedOut": false,
              "duration": 4,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "var requestBody = {\n  \"Wrong\": \"newName\",\n  \"pass\": \"2222\"\n};\nrequest.patch('/api/v1/users').set('Authorization', authToken).send(requestBody).expect(403).end(function (err, res) {\n  console.log('Status:', res.status); // Display the response status\n  if (res.body.message === 'User updated with success!' && res.status === 200) {\n    return done(new Error('for invalid body Message in response should not be :User updated with success! and status code should not be 200'));\n  }\n  done();\n});",
              "err": {
                "message": "Error: for invalid body Message in response should not be :User updated with success! and status code should not be 200",
                "estack": "Error: for invalid body Message in response should not be :User updated with success! and status code should not be 200\n    at Test.<anonymous> (test\\/GET_PATCH_USER_BY_TOKEN.js:275:25)\n    at Test.assert (node_modules\\supertest\\lib\\test.js:172:8)\n    at localAssert (node_modules\\supertest\\lib\\test.js:120:14)\n    at fn (node_modules\\supertest\\lib\\test.js:125:7)\n    at Test.callback (node_modules\\superagent\\src\\node\\index.js:913:12)\n    at fn (node_modules\\superagent\\src\\node\\index.js:1166:18)\n    at IncomingMessage.<anonymous> (node_modules\\superagent\\src\\node\\parsers\\json.js:19:7)\n    at IncomingMessage.emit (node:events:530:35)\n    at endReadableNT (node:internal/streams/readable:1696:12)\n    at processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "112c10b7-f38f-4aa9-b9d5-9f73514d7321",
              "parentUUID": "e43ef5da-eb17-4728-9e12-d0741ea511d2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid body->blank sent body,valid correct token",
              "fullTitle": "Update User API,valid,invalid,valid_wrong_token invalid body->blank sent body,valid correct token",
              "timedOut": false,
              "duration": 6,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "request.patch('/api/v1/users').set('Authorization', authToken).send({}).end(function (err, res) {\n  console.log('Status:', res.status); // Display the response status\n  // Check if the response message is 'User registered with success' and status code is not 200\n  if (res.body.message === 'User updated with success!' && res.status === 200) {\n    return done(new Error('for invalid body Message in response should not be :User updated with success! and status code should not be 200'));\n  }\n  done();\n});",
              "err": {
                "message": "Error: for invalid body Message in response should not be :User updated with success! and status code should not be 200",
                "estack": "Error: for invalid body Message in response should not be :User updated with success! and status code should not be 200\n    at Test.<anonymous> (test\\/GET_PATCH_USER_BY_TOKEN.js:292:17)\n    at Test.assert (node_modules\\supertest\\lib\\test.js:172:8)\n    at localAssert (node_modules\\supertest\\lib\\test.js:120:14)\n    at fn (node_modules\\supertest\\lib\\test.js:125:7)\n    at Test.callback (node_modules\\superagent\\src\\node\\index.js:913:12)\n    at fn (node_modules\\superagent\\src\\node\\index.js:1166:18)\n    at IncomingMessage.<anonymous> (node_modules\\superagent\\src\\node\\parsers\\json.js:19:7)\n    at IncomingMessage.emit (node:events:530:35)\n    at endReadableNT (node:internal/streams/readable:1696:12)\n    at processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "928a7524-56d4-4587-a268-f4ad9b7f9c5c",
              "parentUUID": "e43ef5da-eb17-4728-9e12-d0741ea511d2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "37fe5b03-a65d-42ce-bebc-9bc12b87e4a9",
            "166e936c-4467-444a-91f2-1dcfb8d90300"
          ],
          "failures": [
            "66f34113-1c5f-4919-8d71-3d37e2f30724",
            "112c10b7-f38f-4aa9-b9d5-9f73514d7321",
            "928a7524-56d4-4587-a268-f4ad9b7f9c5c"
          ],
          "pending": [],
          "skipped": [],
          "duration": 20,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.4.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}