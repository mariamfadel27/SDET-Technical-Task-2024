{
  "stats": {
    "suites": 8,
    "tests": 16,
    "passes": 13,
    "pending": 0,
    "failures": 3,
    "start": "2024-04-17T12:12:27.119Z",
    "end": "2024-04-17T12:12:27.499Z",
    "duration": 380,
    "testsRegistered": 16,
    "passPercent": 81.25,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "edf7cac9-a600-4117-a3bc-ffaccffa80f0",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before each\" hook in \"{root}\"",
          "fullTitle": "\"before each\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 7,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "// Create user\nvar newUser = {\n  name: faker.name.firstName(),\n  email: faker.internet.email(),\n  password: faker.internet.password()\n};\nrequest.post('/api/v1/users').send(newUser).expect(200).end(function (err, res) {\n  if (err) return done(err);\n  // Authenticate user\n  var credentials = {\n    email: newUser.email,\n    password: newUser.password\n  };\n  request.post('/api/v1/auth').send(credentials).expect(200).end(function (err, res) {\n    if (err) return done(err);\n    authToken = res.body.token;\n    done();\n  });\n});",
          "err": {},
          "uuid": "d239d415-73cb-4e3e-aaf7-722db33ead69",
          "parentUUID": "edf7cac9-a600-4117-a3bc-ffaccffa80f0",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook in \"{root}\"",
          "fullTitle": "\"after all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 7,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); });",
          "err": {},
          "uuid": "bfa65996-1b5b-4b0e-a538-3343ff472ef8",
          "parentUUID": "edf7cac9-a600-4117-a3bc-ffaccffa80f0",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after all\" hook in \"{root}\"",
          "fullTitle": "\"after all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 4,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); });",
          "err": {},
          "uuid": "1982e886-bd19-4e0f-8805-cb87e7f5915e",
          "parentUUID": "edf7cac9-a600-4117-a3bc-ffaccffa80f0",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after all\" hook in \"{root}\"",
          "fullTitle": "\"after all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 3,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); });",
          "err": {},
          "uuid": "a180150b-5be3-44a2-aa9e-a300763087ba",
          "parentUUID": "edf7cac9-a600-4117-a3bc-ffaccffa80f0",
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "a92c7973-c695-44cf-bb0f-94159ac84e5b",
          "title": "User Authentication API for not registered user",
          "fullFile": "C:\\Users\\Maria\\OneDrive - Faculty of Engineering Ain Shams University\\Desktop\\SDET_Task_Mariam_Waleed\\API_TEST\\test\\authenticate_user.js",
          "file": "\\test\\authenticate_user.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return status 401 and \"Incorrect email or password\" for unregistered email",
              "fullTitle": "User Authentication API for not registered user should return status 401 and \"Incorrect email or password\" for unregistered email",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var credentials = {\n  email: \"not_registestered@gmail.com\",\n  password: \"not_registestered_password\"\n};\nrequest.post('/api/v1/auth').send(credentials).expect(401).end(function (err, res) {\n  if (err) return done(err);\n  var responseBody = res.body;\n  if (responseBody.message !== 'Incorrect email or password') {\n    return done(new Error('Unexpected message in response'));\n  }\n  console.log('Status:', res.status); // Display the response status\n  console.log('Response message:', responseBody.message); // Display the response message\n  done();\n});",
              "err": {},
              "uuid": "0d36e2ac-17bc-485c-ad95-8b7c95f7c7e7",
              "parentUUID": "a92c7973-c695-44cf-bb0f-94159ac84e5b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0d36e2ac-17bc-485c-ad95-8b7c95f7c7e7"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "6e6f8b18-cb82-49bd-909e-082dd3a97ce7",
          "title": "User Authentication API for a registered user",
          "fullFile": "C:\\Users\\Maria\\OneDrive - Faculty of Engineering Ain Shams University\\Desktop\\SDET_Task_Mariam_Waleed\\API_TEST\\test\\authenticate_user.js",
          "file": "\\test\\authenticate_user.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create a new user and store email and password",
              "fullTitle": "User Authentication API for a registered user should create a new user and store email and password",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var newUser = {\n  name: faker.name.firstName(),\n  email: faker.internet.email(),\n  password: faker.internet.password()\n};\nrequest.post('/api/v1/users').send(newUser).expect(200).end(function (err, res) {\n  if (err) return done(err);\n  var responseBody = res.body;\n  if (responseBody.message !== 'User registered with success') {\n    return done(new Error('Unexpected message in response'));\n  }\n  // Store email and password for further use\n  userEmail = newUser.email;\n  userPassword = newUser.password;\n  console.log('User created with email:', userEmail, 'and password:', userPassword);\n  done();\n});",
              "err": {},
              "uuid": "e9bcc5e7-3422-4a61-9469-15287bb79ddb",
              "parentUUID": "6e6f8b18-cb82-49bd-909e-082dd3a97ce7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should authenticate the user and store the token",
              "fullTitle": "User Authentication API for a registered user should authenticate the user and store the token",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (!userEmail || !userPassword) {\n  return done(new Error('User email or password missing'));\n}\nvar credentials = {\n  email: userEmail,\n  password: userPassword\n};\nrequest.post('/api/v1/auth').send(credentials).expect(200).end(function (err, res) {\n  if (err) return done(err);\n  var responseBody = res.body;\n  if (!responseBody.token) {\n    return done(new Error('Token missing in response'));\n  }\n  // Store token for further use\n  authToken = responseBody.token;\n  console.log('User authenticated with token:', authToken);\n  done();\n});",
              "err": {},
              "uuid": "37166581-17cd-45bc-8eb1-08985ea90389",
              "parentUUID": "6e6f8b18-cb82-49bd-909e-082dd3a97ce7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e9bcc5e7-3422-4a61-9469-15287bb79ddb",
            "37166581-17cd-45bc-8eb1-08985ea90389"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 18,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "edaee8aa-73d0-4c37-a1f7-01947233a159",
          "title": "Create_user->POST /api/v1/users",
          "fullFile": "C:\\Users\\Maria\\OneDrive - Faculty of Engineering Ain Shams University\\Desktop\\SDET_Task_Mariam_Waleed\\API_TEST\\test\\Create_user.js",
          "file": "\\test\\Create_user.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "testcase-1(sends valid body,check for message & token,throws error as bug found no token in response)",
              "fullTitle": "Create_user->POST /api/v1/users testcase-1(sends valid body,check for message & token,throws error as bug found no token in response)",
              "timedOut": false,
              "duration": 9,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "var user = {\n  name: faker.name.firstName(),\n  email: faker.internet.email(),\n  password: faker.internet.password()\n};\nconsole.log(user);\nrequest.post(\"/api/v1/users\").send(user).expect(200).end(function (err, res) {\n  var responseBody = res.body;\n  console.log('Response message:', responseBody.message); // Display the response message\n  if (responseBody.message !== 'User registered with success') {\n    return done(new Error('Unexpected message in response'));\n  }\n  if (!responseBody.token) {\n    return done(new Error('Token missing in response')); /* this error finds a bug where token not found */\n  }\n  done();\n});",
              "err": {
                "message": "Error: Token missing in response",
                "estack": "Error: Token missing in response\n    at Test.<anonymous> (test\\/Create_user.js:46:23)\n    at Test.assert (node_modules\\supertest\\lib\\test.js:172:8)\n    at localAssert (node_modules\\supertest\\lib\\test.js:120:14)\n    at fn (node_modules\\supertest\\lib\\test.js:125:7)\n    at Test.callback (node_modules\\superagent\\src\\node\\index.js:913:12)\n    at fn (node_modules\\superagent\\src\\node\\index.js:1166:18)\n    at IncomingMessage.<anonymous> (node_modules\\superagent\\src\\node\\parsers\\json.js:19:7)\n    at IncomingMessage.emit (node:events:530:35)\n    at endReadableNT (node:internal/streams/readable:1696:12)\n    at processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "c695fa33-b979-4c9b-91d1-7035e7d27a34",
              "parentUUID": "edaee8aa-73d0-4c37-a1f7-01947233a159",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an error for empty request body",
              "fullTitle": "Create_user->POST /api/v1/users should return an error for empty request body",
              "timedOut": false,
              "duration": 5,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "request.post('/api/v1/users').send({}).expect(400).end(function (err, res) {\n  if (err) return done(err);\n  return done(new Error('Error should fail creating an empty user'));\n  console.log('Response message:', responseBody.message); // Display the response message\n  done();\n});",
              "err": {
                "message": "Error: expected 400 \"Bad Request\", got 200 \"OK\"",
                "estack": "Error: expected 400 \"Bad Request\", got 200 \"OK\"\n    at Context.<anonymous> (test\\/Create_user.js:59:8)\n    at processImmediate (node:internal/timers:478:21)\n----\n    at Test._assertStatus (node_modules\\supertest\\lib\\test.js:252:14)\n    at C:\\Users\\Maria\\OneDrive - Faculty of Engineering Ain Shams University\\Desktop\\SDET_Task_Mariam_Waleed\\API_TEST\\node_modules\\supertest\\lib\\test.js:308:13\n    at Test._assertFunction (node_modules\\supertest\\lib\\test.js:285:13)\n    at Test.assert (node_modules\\supertest\\lib\\test.js:164:23)\n    at localAssert (node_modules\\supertest\\lib\\test.js:120:14)\n    at fn (node_modules\\supertest\\lib\\test.js:125:7)\n    at Test.callback (node_modules\\superagent\\src\\node\\index.js:913:12)\n    at fn (node_modules\\superagent\\src\\node\\index.js:1166:18)\n    at IncomingMessage.<anonymous> (node_modules\\superagent\\src\\node\\parsers\\json.js:19:7)\n    at IncomingMessage.emit (node:events:530:35)\n    at endReadableNT (node:internal/streams/readable:1696:12)\n    at processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "a3c9e68a-a52d-49ec-b973-4c5f8ff18bbd",
              "parentUUID": "edaee8aa-73d0-4c37-a1f7-01947233a159",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "c695fa33-b979-4c9b-91d1-7035e7d27a34",
            "a3c9e68a-a52d-49ec-b973-4c5f8ff18bbd"
          ],
          "pending": [],
          "skipped": [],
          "duration": 14,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "a6ecf3a5-39e0-41c8-964c-5588ac44dd71",
          "title": "Delete User API",
          "fullFile": "C:\\Users\\Maria\\OneDrive - Faculty of Engineering Ain Shams University\\Desktop\\SDET_Task_Mariam_Waleed\\API_TEST\\test\\delete_by_token_all_users.js",
          "file": "\\test\\delete_by_token_all_users.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should delete user with valid authorization and return success message",
              "fullTitle": "Delete User API should delete user with valid authorization and return success message",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request[\"delete\"]('/api/v1/users').set('Authorization', authToken).expect(200).end(function (err, res) {\n  if (err) {\n    console.error('Error:', err);\n    console.error('Response body:', res.body);\n    return done(err);\n  }\n  var responseBody = res.body;\n  if (responseBody.message !== 'User deleted with success!') {\n    console.error('Unexpected message in response:', responseBody);\n    return done(new Error('Unexpected message in response'));\n  }\n  console.log('Response message:', responseBody.message); // Display the response message\n  done();\n});",
              "err": {},
              "uuid": "a22da320-f2c3-48ff-8ca6-74a07c100304",
              "parentUUID": "a6ecf3a5-39e0-41c8-964c-5588ac44dd71",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return \"Unauthorized to delete\" message for invalid authorization",
              "fullTitle": "Delete User API should return \"Unauthorized to delete\" message for invalid authorization",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var invalidToken = 'invalid_token';\nrequest[\"delete\"]('/api/v1/users').set('Authorization', invalidToken).expect(403).end(function (err, res) {\n  if (err) {\n    console.error('Error:', err);\n    console.error('Response body:', res.body);\n    return done(err);\n  }\n  var responseBody = res.body;\n  if (responseBody.message !== 'Unauthorized to delete') {\n    console.error('Unexpected message in response:', responseBody);\n    return done(new Error('Unexpected message in response'));\n  }\n  console.log('Response message:', responseBody.message); // Display the response message\n  done();\n});",
              "err": {},
              "uuid": "e1c9579c-fa24-4429-b4ea-414063f2a0cd",
              "parentUUID": "a6ecf3a5-39e0-41c8-964c-5588ac44dd71",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a22da320-f2c3-48ff-8ca6-74a07c100304",
            "e1c9579c-fa24-4429-b4ea-414063f2a0cd"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 13,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "44940b4e-0828-4fa2-afd6-a3bf1e38a47b",
          "title": "Delete All Users API",
          "fullFile": "C:\\Users\\Maria\\OneDrive - Faculty of Engineering Ain Shams University\\Desktop\\SDET_Task_Mariam_Waleed\\API_TEST\\test\\delete_by_token_all_users.js",
          "file": "\\test\\delete_by_token_all_users.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should delete all users with correct key_admin and return success message",
              "fullTitle": "Delete All Users API should delete all users with correct key_admin and return success message",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var requestBody = {\n  key_admin: 'keyadmin123'\n};\nrequest[\"delete\"]('/api/v1/all-users').send(requestBody).expect(200).end(function (err, res) {\n  if (err) return done(err);\n  var responseBody = res.body;\n  if (responseBody.message !== 'Users deleted with success') {\n    return done(new Error('Unexpected message in response'));\n  }\n  console.log('Response message:', responseBody.message); // Display the response message\n  done();\n});",
              "err": {},
              "uuid": "d9ad8e52-00de-44a3-9226-b4f7207ba0aa",
              "parentUUID": "44940b4e-0828-4fa2-afd6-a3bf1e38a47b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return \"Unauthorized access\" message for wrong key_admin",
              "fullTitle": "Delete All Users API should return \"Unauthorized access\" message for wrong key_admin",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var requestBody = {\n  key_admin: 'wrong_key'\n};\nrequest[\"delete\"]('/api/v1/all-users').send(requestBody).expect(403).end(function (err, res) {\n  if (err) return done(err);\n  var responseBody = res.body;\n  if (responseBody.message !== 'Unauthorized access') {\n    return done(new Error('Unexpected message in response'));\n  }\n  console.log('Response message:', responseBody.message); // Display the response message\n  done();\n});",
              "err": {},
              "uuid": "8e4c9d1c-6a9e-4b09-b7d2-33d63be62301",
              "parentUUID": "44940b4e-0828-4fa2-afd6-a3bf1e38a47b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d9ad8e52-00de-44a3-9226-b4f7207ba0aa",
            "8e4c9d1c-6a9e-4b09-b7d2-33d63be62301"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 9,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "1afc5ae6-3f59-43ed-af15-b3be1fcbb68f",
          "title": "create user-authenticate it",
          "fullFile": "C:\\Users\\Maria\\OneDrive - Faculty of Engineering Ain Shams University\\Desktop\\SDET_Task_Mariam_Waleed\\API_TEST\\test\\GET_PATCH_USER_BY_TOKEN.js",
          "file": "\\test\\GET_PATCH_USER_BY_TOKEN.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create a new user and store email and password",
              "fullTitle": "create user-authenticate it should create a new user and store email and password",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var newUser = {\n  name: faker.name.firstName(),\n  email: faker.internet.email(),\n  password: faker.internet.password()\n};\nconsole.log(newUser);\nrequest.post('/api/v1/users').send(newUser).expect(200).end(function (err, res) {\n  if (err) return done(err);\n  var responseBody = res.body;\n  if (responseBody.message !== 'User registered with success') {\n    return done(new Error('Unexpected message in response'));\n  }\n  // Store email and password for further use\n  userEmail = newUser.email;\n  userPassword = newUser.password;\n  console.log('User created with email:', userEmail, 'and password:', userPassword);\n  done();\n});",
              "err": {},
              "uuid": "95bd0cc1-b171-480d-b250-31b96155f745",
              "parentUUID": "1afc5ae6-3f59-43ed-af15-b3be1fcbb68f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should authenticate the user and store the token",
              "fullTitle": "create user-authenticate it should authenticate the user and store the token",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (!userEmail || !userPassword) {\n  return done(new Error('User email or password missing'));\n}\nvar credentials = {\n  email: userEmail,\n  password: userPassword\n};\nconsole.log(credentials);\nrequest.post('/api/v1/auth').send(credentials).expect(200).end(function (err, res) {\n  if (err) return done(err);\n  var responseBody = res.body;\n  if (!responseBody.token) {\n    return done(new Error('Token missing in response'));\n  }\n  // Store token for further use\n  authToken = responseBody.token;\n  console.log('User authenticated with token:', authToken);\n  done();\n});",
              "err": {},
              "uuid": "384de77c-04b8-480f-a66c-cdfda46adfe8",
              "parentUUID": "1afc5ae6-3f59-43ed-af15-b3be1fcbb68f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "95bd0cc1-b171-480d-b250-31b96155f745",
            "384de77c-04b8-480f-a66c-cdfda46adfe8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 12,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "f052976c-ba4c-4d56-b77f-99ec8fb739f4",
          "title": "GET_BY_TOKEN(valid/invalid)Authorization",
          "fullFile": "C:\\Users\\Maria\\OneDrive - Faculty of Engineering Ain Shams University\\Desktop\\SDET_Task_Mariam_Waleed\\API_TEST\\test\\GET_PATCH_USER_BY_TOKEN.js",
          "file": "\\test\\GET_PATCH_USER_BY_TOKEN.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return user details with all fields & give error if one of the fields is missing with log message (valid authorization)",
              "fullTitle": "GET_BY_TOKEN(valid/invalid)Authorization should return user details with all fields & give error if one of the fields is missing with log message (valid authorization)",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request.get('/api/v1/users').set('Authorization', authToken).expect(200).end(function (err, res) {\n  if (err) return done(err);\n  var responseBody = res.body;\n  // Check each field of the response\n  if (!responseBody.id) {\n    return done(new Error('ID is missing in response'));\n  }\n  if (!responseBody.name) {\n    return done(new Error('Name is missing in response'));\n  }\n  if (!responseBody.email) {\n    return done(new Error('Email is missing in response'));\n  }\n  if (!responseBody.password) {\n    return done(new Error('Password is missing in response'));\n  }\n  if (!responseBody.imageUrl) {\n    return done(new Error('Image URL is missing in response'));\n  }\n  console.log('User details:', responseBody); // Display the response body\n  done();\n});",
              "err": {},
              "uuid": "8be44e31-b437-4b33-ba66-e4c0e8802124",
              "parentUUID": "f052976c-ba4c-4d56-b77f-99ec8fb739f4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return \"Unauthorized\" with status 403 for invalid authorization token",
              "fullTitle": "GET_BY_TOKEN(valid/invalid)Authorization should return \"Unauthorized\" with status 403 for invalid authorization token",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var invalidToken = 'invalid_token';\nrequest.get('/api/v1/users').set('Authorization', invalidToken).expect(403).end(function (err, res) {\n  if (err) return done(err);\n  var responseBody = res.body;\n  if (responseBody.message !== 'Unauthorized') {\n    return done(new Error('Unexpected message in response'));\n  }\n  console.log('Response message:', responseBody.message); // Display the response message\n  console.log('Status:', res.status); // Display the response status\n  done();\n});",
              "err": {},
              "uuid": "9f2ccc3f-e6c1-4b46-97bf-6d8443759930",
              "parentUUID": "f052976c-ba4c-4d56-b77f-99ec8fb739f4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8be44e31-b437-4b33-ba66-e4c0e8802124",
            "9f2ccc3f-e6c1-4b46-97bf-6d8443759930"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 9,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "d5977545-dd50-408b-9fbd-168fafc0db0c",
          "title": "Update User API,valid,invalid,valid_wrong_token",
          "fullFile": "C:\\Users\\Maria\\OneDrive - Faculty of Engineering Ain Shams University\\Desktop\\SDET_Task_Mariam_Waleed\\API_TEST\\test\\GET_PATCH_USER_BY_TOKEN.js",
          "file": "\\test\\GET_PATCH_USER_BY_TOKEN.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should update user details and return success message for valid token and correct data",
              "fullTitle": "Update User API,valid,invalid,valid_wrong_token should update user details and return success message for valid token and correct data",
              "timedOut": false,
              "duration": 8,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "request.patch('/api/v1/users').set('Authorization', authToken) //the only valid authorization\n.send(requestBody).expect(200).end(function (err, res) {\n  if (err) {\n    console.error('Error:', err);\n    console.error('Response body:', res.body);\n    return done(err);\n  }\n  var responseBody = res.body;\n  if (!responseBody.message) {\n    console.error('Response body does not contain message:', responseBody);\n    return done(new Error('Response body does not contain message'));\n  }\n  if (responseBody.message !== 'User updated with success!') {\n    return done(new Error('Unexpected message in response'));\n  }\n  if (Object.keys(responseBody).length !== 1) {\n    console.error('Response body contains additional fields,we only expect the response message:', responseBody);\n    return done(new Error('Response body contains additional fields'));\n  }\n  console.log('Response message:', responseBody.message); // Display the response message\n  done();\n});",
              "err": {
                "message": "Error: Response body contains additional fields",
                "estack": "Error: Response body contains additional fields\n    at Test.<anonymous> (test\\/GET_PATCH_USER_BY_TOKEN.js:205:23)\n    at Test.assert (node_modules\\supertest\\lib\\test.js:172:8)\n    at localAssert (node_modules\\supertest\\lib\\test.js:120:14)\n    at fn (node_modules\\supertest\\lib\\test.js:125:7)\n    at Test.callback (node_modules\\superagent\\src\\node\\index.js:913:12)\n    at fn (node_modules\\superagent\\src\\node\\index.js:1166:18)\n    at IncomingMessage.<anonymous> (node_modules\\superagent\\src\\node\\parsers\\json.js:19:7)\n    at IncomingMessage.emit (node:events:530:35)\n    at endReadableNT (node:internal/streams/readable:1696:12)\n    at processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "e16fc4e0-4c59-4b60-a9f9-d79f5de724de",
              "parentUUID": "d5977545-dd50-408b-9fbd-168fafc0db0c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return status 403 and \"invalid token\" message for invalid token",
              "fullTitle": "Update User API,valid,invalid,valid_wrong_token should return status 403 and \"invalid token\" message for invalid token",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var invalidToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpb';\nrequest.patch('/api/v1/users').set('Authorization', invalidToken).send(requestBody).expect(403).end(function (err, res) {\n  if (err) return done(err);\n  var responseBody = res.body;\n  console.log('Status:', res.status); // Display the response status\n  console.log('Response message:', responseBody.message); // Display the response message\n  done();\n});",
              "err": {},
              "uuid": "0b17ee27-1f98-46b0-a1a2-8a27522a8165",
              "parentUUID": "d5977545-dd50-408b-9fbd-168fafc0db0c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return status 403 for wrong token, but valid token",
              "fullTitle": "Update User API,valid,invalid,valid_wrong_token should return status 403 for wrong token, but valid token",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var wrongToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6Im5ld19lbWFpbEBnbWFpbC5jb20iLCJpZCI6MzcwNDMsImlhdCI6MTcxMzEyNjcyOCwiZXhwIjoxNzEzMjEzMTI4fQ.y0j2VWhO5_Gwm3V2-_mrjETS_BenLyKwTMLteFV3puc';\nrequest.patch('/api/v1/users').set('Authorization', wrongToken).send(requestBody).expect(403).end(function (err, res) {\n  if (err) return done(err);\n  console.log('Status:', res.status); // Display the response status\n  done();\n});",
              "err": {},
              "uuid": "f9a32af7-761c-46c6-b39e-e8f06e197639",
              "parentUUID": "d5977545-dd50-408b-9fbd-168fafc0db0c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0b17ee27-1f98-46b0-a1a2-8a27522a8165",
            "f9a32af7-761c-46c6-b39e-e8f06e197639"
          ],
          "failures": [
            "e16fc4e0-4c59-4b60-a9f9-d79f5de724de"
          ],
          "pending": [],
          "skipped": [],
          "duration": 15,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.4.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}