{
  "stats": {
    "suites": 8,
    "tests": 16,
    "passes": 13,
    "pending": 0,
    "failures": 3,
    "start": "2024-04-18T15:40:00.827Z",
    "end": "2024-04-18T15:40:01.432Z",
    "duration": 605,
    "testsRegistered": 16,
    "passPercent": 81.25,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "c560e7ff-a9fe-4781-b265-1e659365d239",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before each\" hook in \"{root}\"",
          "fullTitle": "\"before each\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 23,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "// Create user\nvar newUser = {\n  name: faker.name.firstName(),\n  email: faker.internet.email(),\n  password: faker.internet.password()\n};\nrequest.post('/api/v1/users').send(newUser).expect(200).end(function (err, res) {\n  if (err) return done(err);\n  // Authenticate user\n  var credentials = {\n    email: newUser.email,\n    password: newUser.password\n  };\n  request.post('/api/v1/auth').send(credentials).expect(200).end(function (err, res) {\n    if (err) return done(err);\n    authToken = res.body.token;\n    done();\n  });\n});",
          "err": {},
          "uuid": "fc78c500-4de8-4a13-88e5-126582b72fac",
          "parentUUID": "c560e7ff-a9fe-4781-b265-1e659365d239",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook in \"{root}\"",
          "fullTitle": "\"after all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 18,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); });",
          "err": {},
          "uuid": "1b9df357-2054-4036-89e9-e0cc99f1858a",
          "parentUUID": "c560e7ff-a9fe-4781-b265-1e659365d239",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after all\" hook in \"{root}\"",
          "fullTitle": "\"after all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 15,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); });",
          "err": {},
          "uuid": "2c443bae-6690-401a-bc78-0e3133c1b45e",
          "parentUUID": "c560e7ff-a9fe-4781-b265-1e659365d239",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after all\" hook in \"{root}\"",
          "fullTitle": "\"after all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 14,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); });",
          "err": {},
          "uuid": "13fac38a-55b5-47fd-ab26-794537018ab5",
          "parentUUID": "c560e7ff-a9fe-4781-b265-1e659365d239",
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "4ca60369-50c3-4f7a-a7b8-ab710e9a8fb7",
          "title": "User Authentication API for not registered user",
          "fullFile": "C:\\Users\\Maria\\OneDrive - Faculty of Engineering Ain Shams University\\Desktop\\SDET_Task_Mariam_Waleed\\API_TEST\\test\\authenticate_user.js",
          "file": "\\test\\authenticate_user.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return status 401 and \"Incorrect email or password\" for unregistered email",
              "fullTitle": "User Authentication API for not registered user should return status 401 and \"Incorrect email or password\" for unregistered email",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var credentials = {\n  email: \"not_registestered@gmail.com\",\n  password: \"not_registestered_password\"\n};\nrequest.post('/api/v1/auth').send(credentials).expect(401).end(function (err, res) {\n  if (err) return done(err);\n  var responseBody = res.body;\n  if (responseBody.message !== 'Incorrect email or password') {\n    return done(new Error('Unexpected message in response'));\n  }\n  console.log('Status:', res.status); // Display the response status\n  console.log('Response message:', responseBody.message); // Display the response message\n  done();\n});",
              "err": {},
              "uuid": "85feeb2f-70e7-4d16-a497-2a79a7f808a5",
              "parentUUID": "4ca60369-50c3-4f7a-a7b8-ab710e9a8fb7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "85feeb2f-70e7-4d16-a497-2a79a7f808a5"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "56b1d90f-c490-4b47-bd90-1429ad04b896",
          "title": "User Authentication API for a registered user",
          "fullFile": "C:\\Users\\Maria\\OneDrive - Faculty of Engineering Ain Shams University\\Desktop\\SDET_Task_Mariam_Waleed\\API_TEST\\test\\authenticate_user.js",
          "file": "\\test\\authenticate_user.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create a new user and store email and password",
              "fullTitle": "User Authentication API for a registered user should create a new user and store email and password",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var newUser = {\n  name: faker.name.firstName(),\n  email: faker.internet.email(),\n  password: faker.internet.password()\n};\nrequest.post('/api/v1/users').send(newUser).expect(200).end(function (err, res) {\n  if (err) return done(err);\n  var responseBody = res.body;\n  if (responseBody.message !== 'User registered with success') {\n    return done(new Error('Unexpected message in response'));\n  }\n  // Store email and password for further use\n  userEmail = newUser.email;\n  userPassword = newUser.password;\n  console.log('User created with email:', userEmail, 'and password:', userPassword);\n  done();\n});",
              "err": {},
              "uuid": "9aa0fdc7-61a6-4987-b723-9fb951e1781d",
              "parentUUID": "56b1d90f-c490-4b47-bd90-1429ad04b896",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should authenticate the user and store the token",
              "fullTitle": "User Authentication API for a registered user should authenticate the user and store the token",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (!userEmail || !userPassword) {\n  return done(new Error('User email or password missing'));\n}\nvar credentials = {\n  email: userEmail,\n  password: userPassword\n};\nrequest.post('/api/v1/auth').send(credentials).expect(200).end(function (err, res) {\n  if (err) return done(err);\n  var responseBody = res.body;\n  if (!responseBody.token) {\n    return done(new Error('Token missing in response'));\n  }\n  // Store token for further use\n  authToken = responseBody.token;\n  console.log('User authenticated with token:', authToken);\n  done();\n});",
              "err": {},
              "uuid": "f6d7704c-626d-493d-bd04-225d00ed5c66",
              "parentUUID": "56b1d90f-c490-4b47-bd90-1429ad04b896",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9aa0fdc7-61a6-4987-b723-9fb951e1781d",
            "f6d7704c-626d-493d-bd04-225d00ed5c66"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 12,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "5637149e-d5e9-4e40-9416-b82ce100e2e6",
          "title": "Create_user->POST /api/v1/users",
          "fullFile": "C:\\Users\\Maria\\OneDrive - Faculty of Engineering Ain Shams University\\Desktop\\SDET_Task_Mariam_Waleed\\API_TEST\\test\\Create_user.js",
          "file": "\\test\\Create_user.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "testcase-1(sends valid body,check for message & token,throws error as bug found no token in response)",
              "fullTitle": "Create_user->POST /api/v1/users testcase-1(sends valid body,check for message & token,throws error as bug found no token in response)",
              "timedOut": false,
              "duration": 10,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "var user = {\n  name: faker.name.firstName(),\n  email: faker.internet.email(),\n  password: faker.internet.password()\n};\nconsole.log(user);\nrequest.post(\"/api/v1/users\").send(user).expect(200).end(function (err, res) {\n  var responseBody = res.body;\n  console.log('Response message:', responseBody.message); // Display the response message\n  if (responseBody.message !== 'User registered with success') {\n    return done(new Error('Unexpected message in response'));\n  }\n  if (!responseBody.token) {\n    return done(new Error('Token missing in response')); /* this error finds a bug where token not found */\n  }\n  done();\n});",
              "err": {
                "message": "Error: Token missing in response",
                "estack": "Error: Token missing in response\n    at Test.<anonymous> (test\\/Create_user.js:46:23)\n    at Test.assert (node_modules\\supertest\\lib\\test.js:172:8)\n    at localAssert (node_modules\\supertest\\lib\\test.js:120:14)\n    at fn (node_modules\\supertest\\lib\\test.js:125:7)\n    at Test.callback (node_modules\\superagent\\src\\node\\index.js:913:12)\n    at fn (node_modules\\superagent\\src\\node\\index.js:1166:18)\n    at IncomingMessage.<anonymous> (node_modules\\superagent\\src\\node\\parsers\\json.js:19:7)\n    at IncomingMessage.emit (node:events:530:35)\n    at endReadableNT (node:internal/streams/readable:1696:12)\n    at processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "0bf5e407-0af5-4187-b6b8-9f88c8b39721",
              "parentUUID": "5637149e-d5e9-4e40-9416-b82ce100e2e6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an error for empty request body",
              "fullTitle": "Create_user->POST /api/v1/users should return an error for empty request body",
              "timedOut": false,
              "duration": 7,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "request.post('/api/v1/users').send({}).expect(400).end(function (err, res) {\n  if (err) return done(err);\n  return done(new Error('Error should fail creating an empty user'));\n  console.log('Response message:', responseBody.message); // Display the response message\n  done();\n});",
              "err": {
                "message": "Error: expected 400 \"Bad Request\", got 200 \"OK\"",
                "estack": "Error: expected 400 \"Bad Request\", got 200 \"OK\"\n    at Context.<anonymous> (test\\/Create_user.js:59:8)\n    at processImmediate (node:internal/timers:478:21)\n----\n    at Test._assertStatus (node_modules\\supertest\\lib\\test.js:252:14)\n    at C:\\Users\\Maria\\OneDrive - Faculty of Engineering Ain Shams University\\Desktop\\SDET_Task_Mariam_Waleed\\API_TEST\\node_modules\\supertest\\lib\\test.js:308:13\n    at Test._assertFunction (node_modules\\supertest\\lib\\test.js:285:13)\n    at Test.assert (node_modules\\supertest\\lib\\test.js:164:23)\n    at localAssert (node_modules\\supertest\\lib\\test.js:120:14)\n    at fn (node_modules\\supertest\\lib\\test.js:125:7)\n    at Test.callback (node_modules\\superagent\\src\\node\\index.js:913:12)\n    at fn (node_modules\\superagent\\src\\node\\index.js:1166:18)\n    at IncomingMessage.<anonymous> (node_modules\\superagent\\src\\node\\parsers\\json.js:19:7)\n    at IncomingMessage.emit (node:events:530:35)\n    at endReadableNT (node:internal/streams/readable:1696:12)\n    at processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "f01c8b65-1acf-4efd-a987-ef2a829ff1f6",
              "parentUUID": "5637149e-d5e9-4e40-9416-b82ce100e2e6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "0bf5e407-0af5-4187-b6b8-9f88c8b39721",
            "f01c8b65-1acf-4efd-a987-ef2a829ff1f6"
          ],
          "pending": [],
          "skipped": [],
          "duration": 17,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "4eec7e3b-c69e-4e7d-b560-a9fa04966e08",
          "title": "Delete User API",
          "fullFile": "C:\\Users\\Maria\\OneDrive - Faculty of Engineering Ain Shams University\\Desktop\\SDET_Task_Mariam_Waleed\\API_TEST\\test\\delete_by_token_all_users.js",
          "file": "\\test\\delete_by_token_all_users.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should delete user with valid authorization and return success message",
              "fullTitle": "Delete User API should delete user with valid authorization and return success message",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request[\"delete\"]('/api/v1/users').set('Authorization', authToken).expect(200).end(function (err, res) {\n  if (err) {\n    console.error('Error:', err);\n    console.error('Response body:', res.body);\n    return done(err);\n  }\n  var responseBody = res.body;\n  if (responseBody.message !== 'User deleted with success!') {\n    console.error('Unexpected message in response:', responseBody);\n    return done(new Error('Unexpected message in response'));\n  }\n  console.log('Response message:', responseBody.message); // Display the response message\n  done();\n});",
              "err": {},
              "uuid": "c06cdfa2-09e5-44f1-9171-5273102faf44",
              "parentUUID": "4eec7e3b-c69e-4e7d-b560-a9fa04966e08",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return \"Unauthorized to delete\" message for invalid authorization",
              "fullTitle": "Delete User API should return \"Unauthorized to delete\" message for invalid authorization",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var invalidToken = 'invalid_token';\nrequest[\"delete\"]('/api/v1/users').set('Authorization', invalidToken).expect(403).end(function (err, res) {\n  if (err) {\n    console.error('Error:', err);\n    console.error('Response body:', res.body);\n    return done(err);\n  }\n  var responseBody = res.body;\n  if (responseBody.message !== 'Unauthorized to delete') {\n    console.error('Unexpected message in response:', responseBody);\n    return done(new Error('Unexpected message in response'));\n  }\n  console.log('Response message:', responseBody.message); // Display the response message\n  done();\n});",
              "err": {},
              "uuid": "3228a699-a020-4c23-b9f3-d568d416c88e",
              "parentUUID": "4eec7e3b-c69e-4e7d-b560-a9fa04966e08",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c06cdfa2-09e5-44f1-9171-5273102faf44",
            "3228a699-a020-4c23-b9f3-d568d416c88e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 10,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "1ebc65c4-2d0a-46fe-a2e6-bcba63291518",
          "title": "Delete All Users API",
          "fullFile": "C:\\Users\\Maria\\OneDrive - Faculty of Engineering Ain Shams University\\Desktop\\SDET_Task_Mariam_Waleed\\API_TEST\\test\\delete_by_token_all_users.js",
          "file": "\\test\\delete_by_token_all_users.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should delete all users with correct key_admin and return success message",
              "fullTitle": "Delete All Users API should delete all users with correct key_admin and return success message",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var requestBody = {\n  key_admin: 'keyadmin123'\n};\nrequest[\"delete\"]('/api/v1/all-users').send(requestBody).expect(200).end(function (err, res) {\n  if (err) return done(err);\n  var responseBody = res.body;\n  if (responseBody.message !== 'Users deleted with success') {\n    return done(new Error('Unexpected message in response'));\n  }\n  console.log('Response message:', responseBody.message); // Display the response message\n  done();\n});",
              "err": {},
              "uuid": "212bdcc3-1efe-42ba-af54-08ed84fc2965",
              "parentUUID": "1ebc65c4-2d0a-46fe-a2e6-bcba63291518",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return \"Unauthorized access\" message for wrong key_admin",
              "fullTitle": "Delete All Users API should return \"Unauthorized access\" message for wrong key_admin",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var requestBody = {\n  key_admin: 'wrong_key'\n};\nrequest[\"delete\"]('/api/v1/all-users').send(requestBody).expect(403).end(function (err, res) {\n  if (err) return done(err);\n  var responseBody = res.body;\n  if (responseBody.message !== 'Unauthorized access') {\n    return done(new Error('Unexpected message in response'));\n  }\n  console.log('Response message:', responseBody.message); // Display the response message\n  done();\n});",
              "err": {},
              "uuid": "c5ee1049-407d-47a0-99f0-7f544c7bf5e9",
              "parentUUID": "1ebc65c4-2d0a-46fe-a2e6-bcba63291518",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "212bdcc3-1efe-42ba-af54-08ed84fc2965",
            "c5ee1049-407d-47a0-99f0-7f544c7bf5e9"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 11,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "2d53058d-ef6f-4121-8bd1-05b763c98250",
          "title": "create user-authenticate it",
          "fullFile": "C:\\Users\\Maria\\OneDrive - Faculty of Engineering Ain Shams University\\Desktop\\SDET_Task_Mariam_Waleed\\API_TEST\\test\\GET_PATCH_USER_BY_TOKEN.js",
          "file": "\\test\\GET_PATCH_USER_BY_TOKEN.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create a new user and store email and password",
              "fullTitle": "create user-authenticate it should create a new user and store email and password",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var newUser = {\n  name: faker.name.firstName(),\n  email: faker.internet.email(),\n  password: faker.internet.password()\n};\nconsole.log(newUser);\nrequest.post('/api/v1/users').send(newUser).expect(200).end(function (err, res) {\n  if (err) return done(err);\n  var responseBody = res.body;\n  if (responseBody.message !== 'User registered with success') {\n    return done(new Error('Unexpected message in response'));\n  }\n  // Store email and password for further use\n  userEmail = newUser.email;\n  userPassword = newUser.password;\n  console.log('User created with email:', userEmail, 'and password:', userPassword);\n  done();\n});",
              "err": {},
              "uuid": "c1c82197-eb94-45d7-8c37-a2ee65850e06",
              "parentUUID": "2d53058d-ef6f-4121-8bd1-05b763c98250",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should authenticate the user and store the token",
              "fullTitle": "create user-authenticate it should authenticate the user and store the token",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (!userEmail || !userPassword) {\n  return done(new Error('User email or password missing'));\n}\nvar credentials = {\n  email: userEmail,\n  password: userPassword\n};\nconsole.log(credentials);\nrequest.post('/api/v1/auth').send(credentials).expect(200).end(function (err, res) {\n  if (err) return done(err);\n  var responseBody = res.body;\n  if (!responseBody.token) {\n    return done(new Error('Token missing in response'));\n  }\n  // Store token for further use\n  authToken = responseBody.token;\n  console.log('User authenticated with token:', authToken);\n  done();\n});",
              "err": {},
              "uuid": "1bb5977f-1327-4c27-af60-39cf38909ff6",
              "parentUUID": "2d53058d-ef6f-4121-8bd1-05b763c98250",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c1c82197-eb94-45d7-8c37-a2ee65850e06",
            "1bb5977f-1327-4c27-af60-39cf38909ff6"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 14,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "e1f30596-f6eb-486e-9b1f-72855e0f09c4",
          "title": "GET_BY_TOKEN(valid/invalid)Authorization",
          "fullFile": "C:\\Users\\Maria\\OneDrive - Faculty of Engineering Ain Shams University\\Desktop\\SDET_Task_Mariam_Waleed\\API_TEST\\test\\GET_PATCH_USER_BY_TOKEN.js",
          "file": "\\test\\GET_PATCH_USER_BY_TOKEN.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return user details with all fields & give error if one of the fields is missing with log message (valid authorization)",
              "fullTitle": "GET_BY_TOKEN(valid/invalid)Authorization should return user details with all fields & give error if one of the fields is missing with log message (valid authorization)",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request.get('/api/v1/users').set('Authorization', authToken).expect(200).end(function (err, res) {\n  if (err) return done(err);\n  var responseBody = res.body;\n  // Check each field of the response\n  if (!responseBody.id) {\n    return done(new Error('ID is missing in response'));\n  }\n  if (!responseBody.name) {\n    return done(new Error('Name is missing in response'));\n  }\n  if (!responseBody.email) {\n    return done(new Error('Email is missing in response'));\n  }\n  if (!responseBody.password) {\n    return done(new Error('Password is missing in response'));\n  }\n  if (!responseBody.imageUrl) {\n    return done(new Error('Image URL is missing in response'));\n  }\n  console.log('User details:', responseBody); // Display the response body\n  done();\n});",
              "err": {},
              "uuid": "d4dfd3eb-fb4d-4141-8e32-cf4abc1355df",
              "parentUUID": "e1f30596-f6eb-486e-9b1f-72855e0f09c4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return \"Unauthorized\" with status 403 for invalid authorization token",
              "fullTitle": "GET_BY_TOKEN(valid/invalid)Authorization should return \"Unauthorized\" with status 403 for invalid authorization token",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var invalidToken = 'invalid_token';\nrequest.get('/api/v1/users').set('Authorization', invalidToken).expect(403).end(function (err, res) {\n  if (err) return done(err);\n  var responseBody = res.body;\n  if (responseBody.message !== 'Unauthorized') {\n    return done(new Error('Unexpected message in response'));\n  }\n  console.log('Response message:', responseBody.message); // Display the response message\n  console.log('Status:', res.status); // Display the response status\n  done();\n});",
              "err": {},
              "uuid": "0bb3a192-8998-4602-9f40-788cfe4187d2",
              "parentUUID": "e1f30596-f6eb-486e-9b1f-72855e0f09c4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d4dfd3eb-fb4d-4141-8e32-cf4abc1355df",
            "0bb3a192-8998-4602-9f40-788cfe4187d2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 22,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "b6b7626e-bf0f-4fa7-af61-a30592350cf5",
          "title": "Update User API,valid,invalid,valid_wrong_token",
          "fullFile": "C:\\Users\\Maria\\OneDrive - Faculty of Engineering Ain Shams University\\Desktop\\SDET_Task_Mariam_Waleed\\API_TEST\\test\\GET_PATCH_USER_BY_TOKEN.js",
          "file": "\\test\\GET_PATCH_USER_BY_TOKEN.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should update user details and return success message for valid token and correct data",
              "fullTitle": "Update User API,valid,invalid,valid_wrong_token should update user details and return success message for valid token and correct data",
              "timedOut": false,
              "duration": 23,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "request.patch('/api/v1/users').set('Authorization', authToken) //the only valid authorization\n.send(requestBody).expect(200).end(function (err, res) {\n  if (err) {\n    console.error('Error:', err);\n    console.error('Response body:', res.body);\n    return done(err);\n  }\n  var responseBody = res.body;\n  if (!responseBody.message) {\n    console.error('Response body does not contain message:', responseBody);\n    return done(new Error('Response body does not contain message'));\n  }\n  if (responseBody.message !== 'User updated with success!') {\n    return done(new Error('Unexpected message in response'));\n  }\n  if (Object.keys(responseBody).length !== 1) {\n    console.error('Response body contains additional fields,we only expect the response message:', responseBody);\n    return done(new Error('Response body contains additional fields'));\n  }\n  console.log('Response message:', responseBody.message); // Display the response message\n  done();\n});",
              "err": {
                "message": "Error: Response body contains additional fields",
                "estack": "Error: Response body contains additional fields\n    at Test.<anonymous> (test\\/GET_PATCH_USER_BY_TOKEN.js:205:23)\n    at Test.assert (node_modules\\supertest\\lib\\test.js:172:8)\n    at localAssert (node_modules\\supertest\\lib\\test.js:120:14)\n    at fn (node_modules\\supertest\\lib\\test.js:125:7)\n    at Test.callback (node_modules\\superagent\\src\\node\\index.js:913:12)\n    at fn (node_modules\\superagent\\src\\node\\index.js:1166:18)\n    at IncomingMessage.<anonymous> (node_modules\\superagent\\src\\node\\parsers\\json.js:19:7)\n    at IncomingMessage.emit (node:events:530:35)\n    at endReadableNT (node:internal/streams/readable:1696:12)\n    at processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "ec956daf-3149-4b7d-b606-d68cbed0f493",
              "parentUUID": "b6b7626e-bf0f-4fa7-af61-a30592350cf5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return status 403 and \"invalid token\" message for invalid token",
              "fullTitle": "Update User API,valid,invalid,valid_wrong_token should return status 403 and \"invalid token\" message for invalid token",
              "timedOut": false,
              "duration": 15,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var invalidToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpb';\nrequest.patch('/api/v1/users').set('Authorization', invalidToken).send(requestBody).expect(403).end(function (err, res) {\n  if (err) return done(err);\n  var responseBody = res.body;\n  console.log('Status:', res.status); // Display the response status\n  console.log('Response message:', responseBody.message); // Display the response message\n  done();\n});",
              "err": {},
              "uuid": "f11b2541-5baa-4a23-8223-3eb59fde287a",
              "parentUUID": "b6b7626e-bf0f-4fa7-af61-a30592350cf5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return status 403 for wrong token, but valid token",
              "fullTitle": "Update User API,valid,invalid,valid_wrong_token should return status 403 for wrong token, but valid token",
              "timedOut": false,
              "duration": 17,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var wrongToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6Im5ld19lbWFpbEBnbWFpbC5jb20iLCJpZCI6MzcwNDMsImlhdCI6MTcxMzEyNjcyOCwiZXhwIjoxNzEzMjEzMTI4fQ.y0j2VWhO5_Gwm3V2-_mrjETS_BenLyKwTMLteFV3puc';\nrequest.patch('/api/v1/users').set('Authorization', wrongToken).send(requestBody).expect(403).end(function (err, res) {\n  if (err) return done(err);\n  console.log('Status:', res.status); // Display the response status\n  done();\n});",
              "err": {},
              "uuid": "4cad8222-ceb5-4d97-97f9-62670196b5f5",
              "parentUUID": "b6b7626e-bf0f-4fa7-af61-a30592350cf5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f11b2541-5baa-4a23-8223-3eb59fde287a",
            "4cad8222-ceb5-4d97-97f9-62670196b5f5"
          ],
          "failures": [
            "ec956daf-3149-4b7d-b606-d68cbed0f493"
          ],
          "pending": [],
          "skipped": [],
          "duration": 55,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.4.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}