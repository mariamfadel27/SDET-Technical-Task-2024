{
  "stats": {
    "suites": 3,
    "tests": 9,
    "passes": 5,
    "pending": 0,
    "failures": 4,
    "start": "2024-05-13T19:15:58.735Z",
    "end": "2024-05-13T19:15:58.956Z",
    "duration": 221,
    "testsRegistered": 9,
    "passPercent": 55.55555555555556,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "44c81704-85c0-4daa-9fe6-d88e755e1ebe",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before each\" hook in \"{root}\"",
          "fullTitle": "\"before each\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 7,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "// Create user\nvar newUser = {\n  name: faker.name.firstName(),\n  email: faker.internet.email(),\n  password: faker.internet.password()\n};\n//register a new user first then authenticate it to continue\nrequest.post('/api/v1/users').send(newUser).expect(200).end(function (err, res) {\n  if (err) return done(err);\n  // Authenticate user\n  var credentials = {\n    email: newUser.email,\n    password: newUser.password\n  };\n  request.post('/api/v1/auth').send(credentials).expect(200).end(function (err, res) {\n    if (err) return done(err);\n    authToken = res.body.token; //to authenticate user to get token used to delete user by token\n    done();\n  });\n});",
          "err": {},
          "uuid": "b05cf684-fd41-44af-b2ba-d6828bc17006",
          "parentUUID": "44c81704-85c0-4daa-9fe6-d88e755e1ebe",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook in \"{root}\"",
          "fullTitle": "\"after all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 6,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); });",
          "err": {},
          "uuid": "0e230fdf-8016-4946-aa5c-d86e1760fcfa",
          "parentUUID": "44c81704-85c0-4daa-9fe6-d88e755e1ebe",
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "af287b7c-6638-4664-b425-2b89f1c939bf",
          "title": "GET_BY_TOKEN(valid/invalid)Authorization",
          "fullFile": "C:\\Users\\Maria\\OneDrive - Faculty of Engineering Ain Shams University\\Desktop\\SDET_Task_Mariam_Waleed\\API_TEST\\test\\GET_PATCH_USER_BY_TOKEN.js",
          "file": "\\test\\GET_PATCH_USER_BY_TOKEN.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return user details with all fields & give error if one of the fields is missing with log message (valid authorization)",
              "fullTitle": "GET_BY_TOKEN(valid/invalid)Authorization should return user details with all fields & give error if one of the fields is missing with log message (valid authorization)",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request.get('/api/v1/users').set('Authorization', authToken).expect(200).end(function (err, res) {\n  if (err) return done(err);\n  var responseBody = res.body;\n  // Check each field of the response\n  if (!responseBody.id) {\n    return done(new Error('ID is missing in response'));\n  }\n  if (!responseBody.name) {\n    return done(new Error('Name is missing in response'));\n  }\n  if (!responseBody.email) {\n    return done(new Error('Email is missing in response'));\n  }\n  if (!responseBody.password) {\n    return done(new Error('Password is missing in response'));\n  }\n  if (!responseBody.imageUrl) {\n    return done(new Error('Image URL is missing in response'));\n  }\n  console.log('User details:', responseBody); // Display the response body\n  done();\n});",
              "err": {},
              "uuid": "b90b2d2b-1b41-46d1-9e09-22a16a2732a9",
              "parentUUID": "af287b7c-6638-4664-b425-2b89f1c939bf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "test_case-2: invalid token passed,should return \"Unauthorized\" with status 403 ",
              "fullTitle": "GET_BY_TOKEN(valid/invalid)Authorization test_case-2: invalid token passed,should return \"Unauthorized\" with status 403 ",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var invalidToken = 'invalid_token';\nrequest.get('/api/v1/users').set('Authorization', invalidToken).expect(403).end(function (err, res) {\n  if (err) return done(err);\n  var responseBody = res.body;\n  if (responseBody.message !== 'Unauthorized') {\n    return done(new Error('Unexpected message in response'));\n  }\n  console.log('Response message:', responseBody.message); // Display the response message\n  console.log('Status:', res.status); // Display the response status\n  done();\n});",
              "err": {},
              "uuid": "b545acf1-7ca5-4bb9-8202-20f7c65bea86",
              "parentUUID": "af287b7c-6638-4664-b425-2b89f1c939bf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "test_case-3: no passed token in the header,should return \"Unauthorized\" with status 403 ",
              "fullTitle": "GET_BY_TOKEN(valid/invalid)Authorization test_case-3: no passed token in the header,should return \"Unauthorized\" with status 403 ",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request.get('/api/v1/users').expect(403).end(function (err, res) {\n  if (err) return done(err);\n  var responseBody = res.body;\n  if (responseBody.message !== 'Unauthorized') {\n    return done(new Error('Unexpected message in response'));\n  }\n  console.log('Response message:', responseBody.message); // Display the response message\n  console.log('Status:', res.status); // Display the response status\n  done();\n});",
              "err": {},
              "uuid": "4f483fde-5764-48c8-82eb-ea45a7c6b397",
              "parentUUID": "af287b7c-6638-4664-b425-2b89f1c939bf",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b90b2d2b-1b41-46d1-9e09-22a16a2732a9",
            "b545acf1-7ca5-4bb9-8202-20f7c65bea86",
            "4f483fde-5764-48c8-82eb-ea45a7c6b397"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 17,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "37d96258-2d3f-4902-b79c-566178b14aae",
          "title": "Update User API,Positive testing",
          "fullFile": "C:\\Users\\Maria\\OneDrive - Faculty of Engineering Ain Shams University\\Desktop\\SDET_Task_Mariam_Waleed\\API_TEST\\test\\GET_PATCH_USER_BY_TOKEN.js",
          "file": "\\test\\GET_PATCH_USER_BY_TOKEN.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "test_case_1:with valid & correct token,should update user details and return success message for valid token and correct data",
              "fullTitle": "Update User API,Positive testing test_case_1:with valid & correct token,should update user details and return success message for valid token and correct data",
              "timedOut": false,
              "duration": 10,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "request.patch('/api/v1/users').set('Authorization', authToken) //the only valid authorization\n.send(requestBody).expect(200).end(function (err, res) {\n  if (err) {\n    console.error('Error:', err);\n    console.error('Response body:', res.body);\n    return done(err);\n  }\n  var responseBody = res.body;\n  if (!responseBody.message) {\n    console.error('Response body does not contain message:', responseBody);\n    return done(new Error('Response body does not contain message'));\n  }\n  if (responseBody.message !== 'User updated with success!') {\n    return done(new Error('Unexpected message in response'));\n  }\n  if (Object.keys(responseBody).length !== 1) {\n    console.error('Response body contains additional fields,we only expect the response message:', responseBody);\n    return done(new Error('Response body contains additional fields'));\n  }\n  console.log('Response message:', responseBody.message); // Display the response message\n  done();\n});",
              "err": {
                "message": "Error: Response body contains additional fields",
                "estack": "Error: Response body contains additional fields\n    at Test.<anonymous> (test\\/GET_PATCH_USER_BY_TOKEN.js:193:23)\n    at Test.assert (node_modules\\supertest\\lib\\test.js:172:8)\n    at localAssert (node_modules\\supertest\\lib\\test.js:120:14)\n    at fn (node_modules\\supertest\\lib\\test.js:125:7)\n    at Test.callback (node_modules\\superagent\\src\\node\\index.js:913:12)\n    at fn (node_modules\\superagent\\src\\node\\index.js:1166:18)\n    at IncomingMessage.<anonymous> (node_modules\\superagent\\src\\node\\parsers\\json.js:19:7)\n    at IncomingMessage.emit (node:events:530:35)\n    at endReadableNT (node:internal/streams/readable:1696:12)\n    at processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "6d1d1cb5-d25e-447a-8af9-b9670ffc3232",
              "parentUUID": "37d96258-2d3f-4902-b79c-566178b14aae",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "6d1d1cb5-d25e-447a-8af9-b9670ffc3232"
          ],
          "pending": [],
          "skipped": [],
          "duration": 10,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "f171885c-7c1f-421a-90a4-4227df6c741c",
          "title": "Update User API,valid,invalid,valid_wrong_token",
          "fullFile": "C:\\Users\\Maria\\OneDrive - Faculty of Engineering Ain Shams University\\Desktop\\SDET_Task_Mariam_Waleed\\API_TEST\\test\\GET_PATCH_USER_BY_TOKEN.js",
          "file": "\\test\\GET_PATCH_USER_BY_TOKEN.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "valid body,invalid token",
              "fullTitle": "Update User API,valid,invalid,valid_wrong_token valid body,invalid token",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var invalidToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpb';\nrequest.patch('/api/v1/users').set('Authorization', invalidToken).send(requestBody).expect(403).end(function (err, res) {\n  if (err) return done(err);\n  var responseBody = res.body;\n  console.log('Status:', res.status); // Display the response status\n  console.log('Response message:', responseBody.message); // Display the response message\n  done();\n});",
              "err": {},
              "uuid": "037f857e-f0b9-4326-978f-92ce26c1ad8b",
              "parentUUID": "f171885c-7c1f-421a-90a4-4227df6c741c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "valid body,valid token format but wrong",
              "fullTitle": "Update User API,valid,invalid,valid_wrong_token valid body,valid token format but wrong",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var wrongToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6Im5ld19lbWFpbEBnbWFpbC5jb20iLCJpZCI6MzcwNDMsImlhdCI6MTcxMzEyNjcyOCwiZXhwIjoxNzEzMjEzMTI4fQ.y0j2VWhO5_Gwm3V2-_mrjETS_BenLyKwTMLteFV3puc';\nrequest.patch('/api/v1/users').set('Authorization', wrongToken).send(requestBody).expect(403).end(function (err, res) {\n  if (err) return done(err);\n  console.log('Status:', res.status); // Display the response status\n  done();\n});",
              "err": {},
              "uuid": "2053091d-edbf-402f-b83b-d296379603a6",
              "parentUUID": "f171885c-7c1f-421a-90a4-4227df6c741c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid body(wrong name field,pass is missed),valid correct token",
              "fullTitle": "Update User API,valid,invalid,valid_wrong_token invalid body(wrong name field,pass is missed),valid correct token",
              "timedOut": false,
              "duration": 7,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "var requestBody = {\n  \"Wrong\": \"newName\",\n  \"email\": \"new_email@gmail.com\"\n};\nrequest.patch('/api/v1/users').set('Authorization', authToken).send(requestBody).expect(403).end(function (err, res) {\n  console.log('Status:', res.status); // Display the response status\n  if (res.body.message === 'User updated with success!' && res.status === 200) {\n    return done(new Error('for invalid body Message in response should not be :User updated with success! and status code should not be 200'));\n  }\n  done();\n});",
              "err": {
                "message": "Error: for invalid body Message in response should not be :User updated with success! and status code should not be 200",
                "estack": "Error: for invalid body Message in response should not be :User updated with success! and status code should not be 200\n    at Test.<anonymous> (test\\/GET_PATCH_USER_BY_TOKEN.js:255:25)\n    at Test.assert (node_modules\\supertest\\lib\\test.js:172:8)\n    at localAssert (node_modules\\supertest\\lib\\test.js:120:14)\n    at fn (node_modules\\supertest\\lib\\test.js:125:7)\n    at Test.callback (node_modules\\superagent\\src\\node\\index.js:913:12)\n    at fn (node_modules\\superagent\\src\\node\\index.js:1166:18)\n    at IncomingMessage.<anonymous> (node_modules\\superagent\\src\\node\\parsers\\json.js:19:7)\n    at IncomingMessage.emit (node:events:530:35)\n    at endReadableNT (node:internal/streams/readable:1696:12)\n    at processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "bc3eadd7-af99-43e4-b077-fb6606a8b446",
              "parentUUID": "f171885c-7c1f-421a-90a4-4227df6c741c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid body(wrong name field &passfield,email is missed),valid correct token",
              "fullTitle": "Update User API,valid,invalid,valid_wrong_token invalid body(wrong name field &passfield,email is missed),valid correct token",
              "timedOut": false,
              "duration": 6,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "var requestBody = {\n  \"Wrong\": \"newName\",\n  \"pass\": \"2222\"\n};\nrequest.patch('/api/v1/users').set('Authorization', authToken).send(requestBody).expect(403).end(function (err, res) {\n  console.log('Status:', res.status); // Display the response status\n  if (res.body.message === 'User updated with success!' && res.status === 200) {\n    return done(new Error('for invalid body Message in response should not be :User updated with success! and status code should not be 200'));\n  }\n  done();\n});",
              "err": {
                "message": "Error: for invalid body Message in response should not be :User updated with success! and status code should not be 200",
                "estack": "Error: for invalid body Message in response should not be :User updated with success! and status code should not be 200\n    at Test.<anonymous> (test\\/GET_PATCH_USER_BY_TOKEN.js:275:25)\n    at Test.assert (node_modules\\supertest\\lib\\test.js:172:8)\n    at localAssert (node_modules\\supertest\\lib\\test.js:120:14)\n    at fn (node_modules\\supertest\\lib\\test.js:125:7)\n    at Test.callback (node_modules\\superagent\\src\\node\\index.js:913:12)\n    at fn (node_modules\\superagent\\src\\node\\index.js:1166:18)\n    at IncomingMessage.<anonymous> (node_modules\\superagent\\src\\node\\parsers\\json.js:19:7)\n    at IncomingMessage.emit (node:events:530:35)\n    at endReadableNT (node:internal/streams/readable:1696:12)\n    at processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "8b3fdfba-0392-4745-8924-9b0bc3f5dbc3",
              "parentUUID": "f171885c-7c1f-421a-90a4-4227df6c741c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid body->blank sent body,valid correct token",
              "fullTitle": "Update User API,valid,invalid,valid_wrong_token invalid body->blank sent body,valid correct token",
              "timedOut": false,
              "duration": 8,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "request.patch('/api/v1/users').set('Authorization', authToken).send({}).end(function (err, res) {\n  console.log('Status:', res.status); // Display the response status\n  // Check if the response message is 'User registered with success' and status code is not 200\n  if (res.body.message === 'User updated with success!' && res.status === 200) {\n    return done(new Error('for invalid body Message in response should not be :User updated with success! and status code should not be 200'));\n  }\n  done();\n});",
              "err": {
                "message": "Error: for invalid body Message in response should not be :User updated with success! and status code should not be 200",
                "estack": "Error: for invalid body Message in response should not be :User updated with success! and status code should not be 200\n    at Test.<anonymous> (test\\/GET_PATCH_USER_BY_TOKEN.js:292:17)\n    at Test.assert (node_modules\\supertest\\lib\\test.js:172:8)\n    at localAssert (node_modules\\supertest\\lib\\test.js:120:14)\n    at fn (node_modules\\supertest\\lib\\test.js:125:7)\n    at Test.callback (node_modules\\superagent\\src\\node\\index.js:913:12)\n    at fn (node_modules\\superagent\\src\\node\\index.js:1166:18)\n    at IncomingMessage.<anonymous> (node_modules\\superagent\\src\\node\\parsers\\json.js:19:7)\n    at IncomingMessage.emit (node:events:530:35)\n    at endReadableNT (node:internal/streams/readable:1696:12)\n    at processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "c3923163-9c42-435d-9ec7-88f06a33fe7b",
              "parentUUID": "f171885c-7c1f-421a-90a4-4227df6c741c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "037f857e-f0b9-4326-978f-92ce26c1ad8b",
            "2053091d-edbf-402f-b83b-d296379603a6"
          ],
          "failures": [
            "bc3eadd7-af99-43e4-b077-fb6606a8b446",
            "8b3fdfba-0392-4745-8924-9b0bc3f5dbc3",
            "c3923163-9c42-435d-9ec7-88f06a33fe7b"
          ],
          "pending": [],
          "skipped": [],
          "duration": 29,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.4.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "GET_PATCH_USER_BY_TOKEN_report.html",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "reports",
        "reportFilename": "GET_PATCH_USER_BY_TOKEN_report.html"
      },
      "version": "6.2.0"
    }
  }
}